//
//  CallStack
//  Test
//
//  Source generated by Haxe Objective-C target
//

#import "../haxe/CallStack.h"

@implementation CallStack

+ (NSMutableArray*) exceptionStack{
	
	return [@[] mutableCopy];
}
+ (NSMutableString*) toString:(NSMutableArray*)stack{
	
	
	StringBuf *b = [[StringBuf alloc] init];
	{
		
		int _g = 0;
		while (_g < stack.length) {
			
			
			StackItem *s = ((CASTTenum*)[stack hx_objectAtIndex:_g]);
			++_g;
			[b.b appendString:[@"\nCalled from " mutableCopy]];
			[CallStack itemToString:b s:s];
		}
	}
	return b.b;
}
+ (void) itemToString:(StringBuf*)b s:(StackItem*)s{
	
	
	enum s = e (s)
	switch ( e.index ) {
		
		case 0:
		[b.b appendString:[@"a C function" mutableCopy]];break
		case 1:
		
		var MATCH m : NSMutableString = e.params[0]{
			
			[b.b appendString:[@"module " mutableCopy]];
			[b.b appendString:[Std string:m]];
		}break
		case 2:
		
		var MATCH line : int = e.params[2], MATCH file : NSMutableString = e.params[1], MATCH s1 : StackItem = e.params[0]{
			
			if (s1 != nil) {
				
				[CallStack itemToString:b s:s1];
				[b.b appendString:[@" (" mutableCopy]];
			}
			[b.b appendString:[Std string:file]];
			[b.b appendString:[@" line " mutableCopy]];
			[b.b appendString:[Std string:line]];
			if (s1 != nil) [b.b appendString:[@")" mutableCopy]];
		}break
		case 3:
		
		var MATCH meth : NSMutableString = e.params[1], MATCH cname : NSMutableString = e.params[0]{
			
			[b.b appendString:[Std string:cname]];
			[b.b appendString:[@"." mutableCopy]];
			[b.b appendString:[Std string:meth]];
		}break
		case 4:
		
		var MATCH n : int = e.params[0]{
			
			[b.b appendString:[@"local function #" mutableCopy]];
			[b.b appendString:[Std string:n]];
		}break
	}
}

@end
