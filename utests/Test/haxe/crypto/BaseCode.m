//
//  BaseCode
//  Test
//
//  Source generated by Haxe Objective-C target
//

#import "../../haxe/crypto/BaseCode.h"

@implementation BaseCode

@synthesize base;
@synthesize nbits;
@synthesize tbl;
- (Bytes*) encodeBytes:(Bytes*)b{
	
	int nbits = self.nbits;
	
	Bytes *base = self.base;
	int size = [Std _int:b.length * 8 / nbits];
	
	Bytes *_out = [Bytes alloc:size +  (( (b.length * 8 % nbits == 0) ? 0 : 1))];
	int buf = 0;
	int curbits = 0;
	int mask =  (1 << nbits) - 1;
	int pin = 0;
	int pout = 0;
	while (pout < size) {
		
		while (curbits < nbits) {
			
			curbits += 8;
			buf <<= 8;
			buf |= ((BytesData*)[b.b hx_objectAtIndex:pin++]);
		}
		curbits -= nbits;
		[_out.b hx_replaceObjectAtIndex:pout++ withObject:(base.b hx_replaceObjectAtIndex:buf >> curbits & mask & @255)];
	}
	if (curbits > 0) [_out.b hx_replaceObjectAtIndex:pout++ withObject:(base.b hx_replaceObjectAtIndex:buf << nbits - curbits & mask & @255)];
	return _out;
}
- (void) initTable{
	
	
	NSMutableArray *tbl = [[NSMutableArray alloc] init];
	{
		
		int _g = 0;
		while (_g < 256) {
			
			int i = _g++;
			[tbl hx_replaceObjectAtIndex:i withObject:@-1];
		}
	}
	{
		
		int _g1 = 0; int _g = self.base.length;
		while (_g1 < _g) {
			
			int i = _g1++;
			[tbl hx_replaceObjectAtIndex:self.base.b hx_replaceObjectAtIndex:i withObject:i];
		}
	}
	self.tbl = tbl;
}
- (Bytes*) decodeBytes:(Bytes*)b{
	
	int nbits = self.nbits;
	
	Bytes *base = self.base;
	if (self.tbl == nil) [self initTable];
	
	NSMutableArray *tbl = self.tbl;
	int size = b.length * nbits >> 3;
	
	Bytes *_out = [Bytes alloc:size];
	int buf = 0;
	int curbits = 0;
	int pin = 0;
	int pout = 0;
	while (pout < size) {
		
		while (curbits < 8) {
			
			curbits += nbits;
			buf <<= nbits;
			int i = ((NSMutableArray*)[tbl hx_objectAtIndex:((BytesData*)[b.b hx_objectAtIndex:pin++])]);
			if (i == -1) @throw [@"BaseCode : invalid encoded char" mutableCopy];;
			buf |= i;
		}
		curbits -= 8;
		[_out.b hx_replaceObjectAtIndex:pout++ withObject:((buf >> curbits & @255) & @255)];
	}
	return _out;
}
- (NSMutableString*) encodeString:(NSMutableString*)s{
	
	return [[self encodeBytes:[Bytes ofString:s]] toString];
}
- (NSMutableString*) decodeString:(NSMutableString*)s{
	
	return [[self decodeBytes:[Bytes ofString:s]] toString];
}
- (id) init:(Bytes*)base{
	
	self = [super init];
	int len = base.length;
	int nbits = 1;
	while (len > 1 << nbits) nbits++;
	if (nbits > 8 || len != 1 << nbits) @throw [@"BaseCode : base length must be a power of two." mutableCopy];;
	self.base = base;
	self.nbits = nbits;
	return self;
}

@end
