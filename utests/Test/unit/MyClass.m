//
//  MyClass
//  Test
//
//  Source generated by Haxe Objective-C target
//

#import "../unit/MyClass.h"

@implementation MyClass

@synthesize val;
@synthesize ref;
@synthesize intValue;
@synthesize stringValue;
- (int) get{
	return self.val;
}
- (void) set:(int)v{
	self.val = v;
}
- (int) add:(int)x y:(int)y{
	return [[self.val stringByAppendingString:x] stringByAppendingString:y];
}
- (id) init:(int)v{
	self = [super init];
	self.val = v;
	self.intValue = 55;
	return self;
}

@end

@implementation MyParent

- (int) a{
	return 11;
}
- (int) b{
	return 20;
}
- (id) init{
	self = [super init];
	return self;
}

@end

@implementation MyDynamicChildWithToString

- (NSMutableString*) toString{
	return [@"Custom toString" mutableCopy];
}

@end

@implementation MyDynamicChildWithoutToString


@end

@implementation MyChild1

- (int) a{
	return 12;
}
- (int) b{
	return 21;
}
- (int) c{
	return 19;
}

@end

@implementation MyChild2

- (int) test1:(MyChild1*)mc1{
	return [mc1 b];
}

@end

@implementation Base

@synthesize s;
- (id) init{
	self = [super init];
	return self;
}

@end

@implementation Child1

- (id) init{
	self = [super init];
	return self;
}

@end

@implementation Child2

- (id) init{
	self = [super init];
	return self;
}

@end

@implementation Child2_1

- (id) init{
	self = [super init];
	return self;
}

@end

@implementation Unrelated

@synthesize s;
@synthesize t;
- (id) init{
	self = [super init];
	return self;
}

@end

@implementation ClassI2

- (id) init{
	self = [super init];
	return self;
}

@end

@implementation CI1

- (id) init{
	self = [super init];
	return self;
}

@end

@implementation CI2

- (id) init{
	self = [super init];
	return self;
}

@end

@implementation CII1

- (id) init{
	self = [super init];
	return self;
}

@end

@implementation CII2

- (id) init{
	self = [super init];
	return self;
}

@end

@implementation PClassBase

- (id) init{
	self = [super init];
	return self;
}

@end

@implementation PClass1

- (id) init{
	self = [super init];
	return self;
}

@end

@implementation PClass2

- (id) init:(id)t{
	self = [super init];
	return self;
}

@end

@implementation Cov1

- (Base*) covariant{
	return [[Base alloc] init];
}
- (id) init{
	self = [super init];
	return self;
}

@end

@implementation Cov2

- (Base*) covariant{
	return [[Child1 alloc] init];
}
- (id) init{
	self = [super init];
	return self;
}

@end

@implementation Cov3

- (Base*) covariant{
	return [[Child2_1 alloc] init];
}
- (id) init{
	self = [super init];
	return self;
}

@end

@implementation Ctrv1

- (void) contravariant:(Child1*)arg{
}
- (id) init{
	self = [super init];
	return self;
}

@end

@implementation Ctrv2

- (void) contravariant:(Child1*)_tmp_arg{
	
	Base *arg = (Base*)_tmp_arg;
}
- (id) init{
	self = [super init];
	return self;
}

@end

@implementation InitBase

static int si;
+ (int) si {
	if (si == nil) si = 2;
	return si;
}
+ (void) setSi:(int)hx_val {
	si = hx_val;
}
static int sop;
+ (int) sop {
	if (sop == nil) sop = 27;
	return sop;
}
+ (void) setSop:(int)hx_val {
	sop = hx_val;
}
static id st;
+ (id) st {
	if (st == nil) st = NSMutableString;
	return st;
}
+ (void) setSt:(id)hx_val {
	st = hx_val;
}
static int sp;
+ (int) sp {
	if (sp == nil) sp = 6;
	return sp;
}
+ (void) setSp:(int)hx_val {
	sp = hx_val;
}
static float sinline;
+ (float) sinline {
	if (sinline == nil) sinline = 60000.;
	return sinline;
}
+ (void) setSinline:(float)hx_val {
	sinline = hx_val;
}
@synthesize i;
@synthesize s;
@synthesize b;
@synthesize t;
- (id) init{
	self = [super init];
	self.t = NSMutableString;
	self.b = YES;
	self.s = [@"foo" mutableCopy];
	self.i = 2;
	return self;
}

@end

@implementation InitChild


@end

@implementation InitChildWithCtor

- (id) init:(id)_{
	self = [super init];
	return self;
}

@end

@implementation InitWithoutCtor

@synthesize i;
- (id) init{
	self = [super init];
	self.i = 2;
	return self;
}

@end

@implementation InitProperties

@synthesize accNull;
@synthesize accDefault;

@synthesize accNever;

- (int) set_accFunc:(int)v{
	return ((int)($this:(snd ctx.path)) @throw [@"setter was called" mutableCopy];
	return __r__{
		
		int* __r__}
	}(self));
}
- (id) set_accDynamic:(id)v{
	return ((id)($this:(snd ctx.path)) @throw [@"setter was called" mutableCopy];
	return __r__{
		
		id* __r__}
	}(self));
}
- (id) init{
	self = [super init];
	self.accDynamic = 3;
	self.accNever = 3;
	self.accFunc = 3;
	self.accDefault = 3;
	self.accNull = 3;
	return self;
}

@end

@implementation ParamConstraintsClass

+ (id) staticSingle:(id)a{
	return a;
}
- (id) memberSingle:(id)a{
	return a;
}
- (id) memberMultiple:(id)a{
	return a;
}
- (id) memberComplex:(id)a b:(id)b{
	return b;
}
- (id) memberBasic:(id)a b:(id)b{
	return [b hx_objectAtIndex:0];
}
- (float) memberAnon:(id)v{
	return v[@"x"] + v[@"y"];
}
- (void) memberOverload:(NSMutableString*)a b:(NSMutableString*)b{
}
- (id) init{
	self = [super init];
	return self;
}

@end

@implementation ParamConstraintsClass2

- (void) bind:(id)t{
}
- (void) check:(id)a{
}
- (id) init{
	self = [super init];
	return self;
}

@end

@implementation UsingBase

+ (NSMutableString*) privFunc:(NSMutableString*)s{
	return [s toUpperCase];
}
+ (NSMutableString*) pupFunc:(NSMutableString*)s{
	return [s toUpperCase];
}

@end

@implementation UsingChild1

+ (NSMutableString*) test{
	return [UsingBase pupFunc:[@"foo" mutableCopy]] + [UsingBase privFunc:[@"foo" mutableCopy]] + [UsingChild2 siblingFunc:[@"FOO" mutableCopy]];
}
+ (NSMutableString*) siblingFunc:(NSMutableString*)s{
	return [s toLowerCase];
}

@end

@implementation UsingChild2

+ (NSMutableString*) test{
	return [UsingChild2 siblingFunc:[@"foo" mutableCopy]];
}
+ (NSMutableString*) siblingFunc:(NSMutableString*)s{
	return [s toUpperCase];
}

@end

@implementation UsingUnrelated

+ (NSMutableString*) test{
	return [UsingBase pupFunc:[@"foo" mutableCopy]] + [UsingChild2 siblingFunc:[@"foo" mutableCopy]];
}

@end

@implementation VarProps



+ (int) get_SX{
	return 1;
}
+ (int) set_SX:(int)v{
	return v;
}
+ (int) get_SY{
	return VarProps.SY;
}
+ (int) set_SY:(int)v{
	VarProps.SY = v;
	return v;
}



- (int) get_x{
	return 1;
}
- (int) set_x:(int)v{
	return v;
}
- (int) get_y{
	return self.y;
}
- (int) set_y:(int)v{
	self.y = v;
	return v;
}
- (int) set_z:(int)v{
	self.z = [v stringByAppendingString:@"1"];
	return self.z;
}
- (id) init{
	self = [super init];
	[self set_x:1];
	[self set_y:2];
	[self set_z:3];
	return self;
}

@end

@implementation BaseSuperProp



- (int) get_prop{
	return 1;
}
- (int) set_prop:(int)v{
	return v;
}
- (id) get_fProp{
	return ^(int *i){
		return [[@"test" mutableCopy] stringByAppendingString:i];
	}
}
- (id) init{
	self = [super init];
	return self;
}

@end

@implementation ChildSuperProp

- (int) get_prop{
	return [[super get_prop] stringByAppendingString:@"1"];
}
- (int) set_prop:(int)v{
	return [[super set_prop:v] stringByAppendingString:@"1"];
}
- (id) get_fProp{
	
	NSMutableString *s = [[super get_fProp]:0];
	return ^(int *i){
		return [s stringByAppendingString:i];
	}
}
- (NSMutableString*) test{
	return [[super get_fProp]:2];
}

@end

@implementation InlineCastA

- (InlineCastA*) _self{
	return self;
}

@end

@implementation InlineCastB

- (InlineCastB*) test{
	return (InlineCastB*)[self self];
}
- (NSMutableString*) quote{
	return [@"I am the greatest." mutableCopy];
}
- (id) init{
	self = [super init];
	return self;
}

@end
