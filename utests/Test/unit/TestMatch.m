//
//  TestMatch
//  Test
//
//  Source generated by Haxe Objective-C target
//

#import "../unit/TestMatch.h"

@implementation TestMatch

+ (NSMutableString*) switchNormal:(id)e{
	
	return ^(NSMutableString*)
	enum s = e2 (e expr)
	switch ( e2.index ) {
		
		case 0:
		
		var MATCH e_fexpr_eEConst_0 : Constant = e2.params[0]__r__ = ^(id)
		enum s = e4 (e_fexpr_eEConst_0)
		switch ( e4.index ) {
			
			case 2:
			
			var MATCH s : NSMutableString = e4.params[0]__r__3 = s;break
			default:__r__3 = [@"not_found" mutableCopy];break
		}
		return __r__3{
			
			id* __r__3}
		}();break
		case 4:
		
		var MATCH e_fexpr_eEParenthesis_0 : id = e2.params[0]__r__ = ^(id)
		enum s = e6 (e_fexpr_eEParenthesis_0 expr)
		switch ( e6.index ) {
			
			case 0:
			
			var MATCH e_fexpr_eEParenthesis_0_fexpr_eEConst_0 : Constant = e6.params[0]__r__5 = ^(id)
			enum s = e8 (e_fexpr_eEParenthesis_0_fexpr_eEConst_0)
			switch ( e8.index ) {
				
				case 2:
				
				var MATCH s : NSMutableString = e8.params[0]__r__7 = s;break
				default:__r__7 = [@"not_found" mutableCopy];break
			}
			return __r__7{
				
				id* __r__7}
			}();break
			default:__r__5 = [@"not_found" mutableCopy];break
		}
		return __r__5{
			
			id* __r__5}
		}();break
		case 22:
		
		var MATCH e_fexpr_eEUntyped_0 : id = e2.params[0]__r__ = ^(id)
		enum s = e10 (e_fexpr_eEUntyped_0 expr)
		switch ( e10.index ) {
			
			case 0:
			
			var MATCH e_fexpr_eEUntyped_0_fexpr_eEConst_0 : Constant = e10.params[0]__r__9 = ^(id)
			enum s = e12 (e_fexpr_eEUntyped_0_fexpr_eEConst_0)
			switch ( e12.index ) {
				
				case 2:
				
				var MATCH s : NSMutableString = e12.params[0]__r__11 = s;break
				default:__r__11 = [@"not_found" mutableCopy];break
			}
			return __r__11{
				
				id* __r__11}
			}();break
			default:__r__9 = [@"not_found" mutableCopy];break
		}
		return __r__9{
			
			id* __r__9}
		}();break
		case 3:
		
		var MATCH s : NSMutableString = e2.params[1], MATCH e_fexpr_eEField_0 : id = e2.params[0]__r__ = s;break
		case 1:
		
		var MATCH e_fexpr_eEArray_1 : id = e2.params[1], MATCH e_fexpr_eEArray_0 : id = e2.params[0]__r__ = ^(id)
		enum s = e14 (e_fexpr_eEArray_1 expr)
		switch ( e14.index ) {
			
			case 0:
			
			var MATCH e_fexpr_eEArray_1_fexpr_eEConst_0 : Constant = e14.params[0]__r__13 = ^(id)
			enum s = e16 (e_fexpr_eEArray_1_fexpr_eEConst_0)
			switch ( e16.index ) {
				
				case 0:
				
				var MATCH i : NSMutableString = e16.params[0]__r__15 = [Std string:i];break
				case 1:
				
				var MATCH i : NSMutableString = e16.params[0]__r__15 = [Std string:i];break
				default:__r__15 = [@"not_found" mutableCopy];break
			}
			return __r__15{
				
				id* __r__15}
			}();break
			default:__r__13 = [@"not_found" mutableCopy];break
		}
		return __r__13{
			
			id* __r__13}
		}();break
		case 14:
		
		var MATCH e_fexpr_eEIn_1 : id = e2.params[1], MATCH e_fexpr_eEIn_0 : id = e2.params[0]__r__ = [Std string:e_fexpr_eEIn_1 expr];break
		default:__r__ = [@"not_found" mutableCopy];break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (Constant*) switchCapture:(id)e{
	
	return ^(Constant*)
	enum s = e2 (e expr)
	switch ( e2.index ) {
		
		case 0:
		
		var MATCH _const : Constant = e2.params[0]__r__ = ^(id)
		enum s = e4 (_const)
		switch ( e4.index ) {
			
			case 2:
			
			var MATCH e_fexpr_eEConst_0_eCString_0 : NSMutableString = e4.params[0]__r__3 = ^(id)switch (e_fexpr_eEConst_0_eCString_0){
				case [@"foobar" mutableCopy]:__r__5 = _const;
				break;
				default:__r__5 = nil;break;
			}
			return __r__5{
				
				id* __r__5}
			}();break
			case 0:
			
			var MATCH e_fexpr_eEConst_0_eCInt_0 : NSMutableString = e4.params[0]__r__3 = ^(id)switch (e_fexpr_eEConst_0_eCInt_0){
				case [@"9" mutableCopy]:__r__6 = _const;
				break;
				default:__r__6 = nil;break;
			}
			return __r__6{
				
				id* __r__6}
			}();break
			default:__r__3 = nil;break
		}
		return __r__3{
			
			id* __r__3}
		}();break
		default:__r__ = nil;break
	}
	return __r__{
		
		Constant* __r__}
	}();
}
+ (NSMutableString*) switchArray:(id)e{
	
	return ^(NSMutableString*)
	enum s = e2 (e expr)
	switch ( e2.index ) {
		
		case 6:
		
		var MATCH e_fexpr_eEArrayDecl_0 : NSMutableArray = e2.params[0]__r__ = ^(id)switch (e_fexpr_eEArrayDecl_0.length){
			case 0:__r__3 = [@"[]" mutableCopy];
			break;
			case 1:__r__3 = [[[@"[" mutableCopy] stringByAppendingString:[Std string:((CASTTType--*)[e_fexpr_eEArrayDecl_0 hx_objectAtIndex:@"0"]) expr]] stringByAppendingString:[@"]" mutableCopy]];
			break;
			case 2:__r__3 = [[[[[@"[" mutableCopy] stringByAppendingString:[Std string:((CASTTType--*)[e_fexpr_eEArrayDecl_0 hx_objectAtIndex:@"0"]) expr]] stringByAppendingString:[@"," mutableCopy]] stringByAppendingString:[Std string:((CASTTType--*)[e_fexpr_eEArrayDecl_0 hx_objectAtIndex:@"1"]) expr]] stringByAppendingString:[@"]" mutableCopy]];
			break;
			default:__r__3 = [@"_" mutableCopy];break;
		}
		return __r__3{
			
			id* __r__3}
		}();break
		default:__r__ = [@"_" mutableCopy];break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) switchArray2:(NSMutableArray*)a{
	
	return ^(NSMutableString*)switch (a.length){
		case 2:__r__ = ^(id)switch (((NSMutableString*)[a hx_objectAtIndex:0])){
			case [@"a" mutableCopy]:__r__2 = ^(id)switch (((NSMutableString*)[a hx_objectAtIndex:1])){
				case [@"b" mutableCopy]:__r__3 = [@"0" mutableCopy];
				break;
				default:__r__3 = [[[[@"4:" mutableCopy] stringByAppendingString:((NSMutableString*)[a hx_objectAtIndex:@"0"])] stringByAppendingString:[@"," mutableCopy]] stringByAppendingString:((NSMutableString*)[a hx_objectAtIndex:@"1"])];break;
			}
			return __r__3{
				
				id* __r__3}
			}();
			break;
			default:__r__2 = [[[[@"4:" mutableCopy] stringByAppendingString:((NSMutableString*)[a hx_objectAtIndex:@"0"])] stringByAppendingString:[@"," mutableCopy]] stringByAppendingString:((NSMutableString*)[a hx_objectAtIndex:@"1"])];break;
		}
		return __r__2{
			
			id* __r__2}
		}();
		break;
		case 1:__r__ = ^(id)switch (((NSMutableString*)[a hx_objectAtIndex:0])){
			case [@"a" mutableCopy]:__r__4 = [@"1" mutableCopy];
			break;
			case [@"b" mutableCopy]:__r__4 = [@"2" mutableCopy];
			break;
			default:__r__4 = [[@"3:" mutableCopy] stringByAppendingString:((NSMutableString*)[a hx_objectAtIndex:@"0"])];break;
		}
		return __r__4{
			
			id* __r__4}
		}();
		break;
		case 0:__r__ = ( (a.length == 3) ? [[@"5:" mutableCopy] stringByAppendingString:a.length] : [@"6" mutableCopy]);
		break;
		default:__r__ = ( (a.length == 3) ? [[@"5:" mutableCopy] stringByAppendingString:a.length] : [@"7" mutableCopy]);break;
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) switchStructure:(id)a{
	
	return ^(NSMutableString*)switch (a foo){
		case [@"val1" mutableCopy]:__r__ = ^(id)switch (a bar){
			case [@"val2" mutableCopy]:__r__2 = [@"0" mutableCopy];
			break;
			default:__r__2 = [@"1" mutableCopy];break;
		}
		return __r__2{
			
			id* __r__2}
		}();
		break;
		default:__r__ = ^(id)switch (a bar){
			case [@"val2" mutableCopy]:__r__3 = [@"2" mutableCopy];
			break;
			default:__r__3 = a bar;break;
		}
		return __r__3{
			
			id* __r__3}
		}();break;
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) switchCrazy:(id)e{
	
	return ^(NSMutableString*)
	enum s = e2 (e expr)
	switch ( e2.index ) {
		
		case 22:
		
		var MATCH e_fexpr_eEUntyped_0 : id = e2.params[0]__r__ = ^(id)
		enum s = e4 (e_fexpr_eEUntyped_0 expr)
		switch ( e4.index ) {
			
			case 4:
			
			var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0 : id = e4.params[0]__r__3 = ^(id)
			enum s = e6 (e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0 expr)
			switch ( e6.index ) {
				
				case 1:
				
				var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1 : id = e6.params[1], MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0 : id = e6.params[0]__r__5 = ^(id)
				enum s = e8 (e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0 expr)
				switch ( e8.index ) {
					
					case 0:
					
					var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0_fexpr_eEConst_0 : Constant = e8.params[0]__r__7 = ^(id)
					enum s = e10 (e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0_fexpr_eEConst_0)
					switch ( e10.index ) {
						
						case 2:
						
						var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0_fexpr_eEConst_0_eCString_0 : NSMutableString = e10.params[0]__r__9 = ^(id)
						enum s = e12 (e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1 expr)
						switch ( e12.index ) {
							
							case 0:
							
							var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1_fexpr_eEConst_0 : Constant = e12.params[0]__r__11 = ^(id)
							enum s = e14 (e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1_fexpr_eEConst_0)
							switch ( e14.index ) {
								
								case 0:
								
								var MATCH b : NSMutableString = e14.params[0]__r__13 = [[[Std string:e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0 expr] stringByAppendingString:[@":" mutableCopy]] stringByAppendingString:b];break
								default:__r__13 = [@"_" mutableCopy];break
							}
							return __r__13{
								
								id* __r__13}
							}();break
							default:__r__11 = [@"_" mutableCopy];break
						}
						return __r__11{
							
							id* __r__11}
						}();break
						default:__r__9 = [@"_" mutableCopy];break
					}
					return __r__9{
						
						id* __r__9}
					}();break
					default:__r__7 = [@"_" mutableCopy];break
				}
				return __r__7{
					
					id* __r__7}
				}();break
				default:__r__5 = [@"_" mutableCopy];break
			}
			return __r__5{
				
				id* __r__5}
			}();break
			default:__r__3 = [@"_" mutableCopy];break
		}
		return __r__3{
			
			id* __r__3}
		}();break
		default:__r__ = [@"_" mutableCopy];break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) switchGuard:(id)e{
	
	return ^(NSMutableString*)
	enum s = e2 (e expr)
	switch ( e2.index ) {
		
		case 0:
		
		var MATCH e_fexpr_eEConst_0 : Constant = e2.params[0]__r__ = ^(id)
		enum s = e4 (e_fexpr_eEConst_0)
		switch ( e4.index ) {
			
			case 2:
			
			var MATCH s : NSMutableString = e4.params[0]__r__3 = ( ([StringTools startsWith:s start:[@"foo" mutableCopy]]) ? [@"1" mutableCopy] : ( ([StringTools startsWith:s start:[@"bar" mutableCopy]]) ? [@"2" mutableCopy] : [@"4" mutableCopy]));break
			case 0:
			
			var MATCH i : NSMutableString = e4.params[0]__r__3 = ( (^(BOOL)int _g = [Std parseInt:i] * 2
			__r__5 = ^(BOOL)switch (_g){
				case 4:__r__6 = YES;
				break;
				default:__r__6 = NO;break;
			}
			return __r__6{
				
				BOOL* __r__6}
			}()
			return __r__5{
				
				BOOL* __r__5}
			}()) ? [@"3" mutableCopy] : [@"4" mutableCopy]);break
			default:__r__3 = [@"4" mutableCopy];break
		}
		return __r__3{
			
			id* __r__3}
		}();break
		default:__r__ = [@"5" mutableCopy];break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) switchClass:(Class*)a{
	
	return ^(NSMutableString*)switch (a){
		case NSMutableString:__r__ = [@"String" mutableCopy];
		break;
		case MyClass:__r__ = [@"unit.MyClass" mutableCopy];
		break;
		default:__r__ = [[@"other: " mutableCopy] stringByAppendingString:[Type getClassName:a]];break;
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) toStringX:(X*)x1{
	
	return ^(NSMutableString*)
	enum s = e2 (x1)
	switch ( e2.index ) {
		
		case 0:
		
		var MATCH x : int = e2.params[0]__r__ = ( (x > 1) ? [@">1" mutableCopy] : ( (x <= 1) ? [@"<=1" mutableCopy] : ^(NSMutableString*)@throw [@"this is impossible to reach actually" mutableCopy]
		return __r__3{
			
			NSMutableString* __r__3}
		}()));break
		case 1:
		__r__ = [@"U2" mutableCopy];break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) orMatch:(id)e1 e2:(id)e2{
	
	return ^(NSMutableString*)
	enum s = e2 (e1 expr)
	switch ( e2.index ) {
		
		case 0:
		
		var MATCH e1_fexpr_eEConst_0 : Constant = e2.params[0]__r__ = ^(id)
		enum s = e4 (e1_fexpr_eEConst_0)
		switch ( e4.index ) {
			
			case 1:
			
			var MATCH a : NSMutableString = e4.params[0]__r__3 = ^(id)
			enum s = e6 (e2 expr)
			switch ( e6.index ) {
				
				case 0:
				
				var MATCH e2_fexpr_eEConst_0 : Constant = e6.params[0]__r__5 = ^(id)
				enum s = e8 (e2_fexpr_eEConst_0)
				switch ( e8.index ) {
					
					case 1:
					
					var MATCH b : NSMutableString = e8.params[0]__r__7 = a + b;break
					case 0:
					
					var MATCH b : NSMutableString = e8.params[0]__r__7 = a + b;break
					default:__r__7 = nil;break
				}
				return __r__7{
					
					id* __r__7}
				}();break
				default:__r__5 = nil;break
			}
			return __r__5{
				
				id* __r__5}
			}();break
			case 0:
			
			var MATCH a : NSMutableString = e4.params[0]__r__3 = ^(id)
			enum s = e10 (e2 expr)
			switch ( e10.index ) {
				
				case 0:
				
				var MATCH e2_fexpr_eEConst_0 : Constant = e10.params[0]__r__9 = ^(id)
				enum s = e12 (e2_fexpr_eEConst_0)
				switch ( e12.index ) {
					
					case 1:
					
					var MATCH b : NSMutableString = e12.params[0]__r__11 = a + b;break
					case 0:
					
					var MATCH b : NSMutableString = e12.params[0]__r__11 = a + b;break
					default:__r__11 = nil;break
				}
				return __r__11{
					
					id* __r__11}
				}();break
				default:__r__9 = nil;break
			}
			return __r__9{
				
				id* __r__9}
			}();break
			default:__r__3 = nil;break
		}
		return __r__3{
			
			id* __r__3}
		}();break
		default:__r__ = nil;break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
- (void) testBasic{
	
	[self eq:[@"bar" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EConst:[CString:[@"bar" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2735 copy],
		@"max":[@2740 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"127", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"bar" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EParenthesis:[@{
		@"expr":[[EConst:[CString:[@"bar" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2776 copy],
		@"max":[@2781 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2775 copy],
		@"max":[@2782 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"128", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"bar" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EUntyped:[@{
		@"expr":[[EConst:[CString:[@"bar" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2825 copy],
		@"max":[@2830 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2817 copy],
		@"max":[@2830 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"129", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"foo" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EField:[@{
		@"expr":[[EConst:[CIdent:[@"null" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2865 copy],
		@"max":[@2869 copy],
	} mutableCopy] copy],
	} mutableCopy] field:[@"foo" mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2865 copy],
		@"max":[@2873 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"130", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"22" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EArray:[@{
		@"expr":[[EConst:[CIdent:[@"null" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2907 copy],
		@"max":[@2911 copy],
	} mutableCopy] copy],
	} mutableCopy] e2:[@{
		@"expr":[[EConst:[CInt:[@"22" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2912 copy],
		@"max":[@2914 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2907 copy],
		@"max":[@2915 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"131", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"22.5" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EArray:[@{
		@"expr":[[EConst:[CIdent:[@"null" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2951 copy],
		@"max":[@2955 copy],
	} mutableCopy] copy],
	} mutableCopy] e2:[@{
		@"expr":[[EConst:[CFloat:[@"22.5" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2956 copy],
		@"max":[@2960 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2951 copy],
		@"max":[@2961 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"132", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"EConst(CInt(0))" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EIn:[@{
		@"expr":[[EConst:[CInt:[@"1" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3008 copy],
		@"max":[@3009 copy],
	} mutableCopy] copy],
	} mutableCopy] e2:[@{
		@"expr":[[EConst:[CInt:[@"0" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3013 copy],
		@"max":[@3014 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3008 copy],
		@"max":[@3014 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"133", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"not_found" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EArray:[@{
		@"expr":[[EConst:[CIdent:[@"null" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3055 copy],
		@"max":[@3059 copy],
	} mutableCopy] copy],
	} mutableCopy] e2:[@{
		@"expr":[[EConst:[CString:[@"22" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3060 copy],
		@"max":[@3064 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3055 copy],
		@"max":[@3065 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"134", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self t:nil != [TestMatch switchCapture:(id)[@{
		@"expr":[[EConst:[CString:[@"foobar" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3102 copy],
		@"max":[@3110 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"136", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self t:nil == [TestMatch switchCapture:(id)[@{
		@"expr":[[EConst:[CString:[@"fooba" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3146 copy],
		@"max":[@3153 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"137", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self t:nil != [TestMatch switchCapture:(id)[@{
		@"expr":[[EConst:[CInt:[@"9" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3189 copy],
		@"max":[@3190 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"138", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self t:nil == [TestMatch switchCapture:(id)[@{
		@"expr":[[EConst:[CInt:[@"10" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3226 copy],
		@"max":[@3228 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"139", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"[]" mutableCopy] v2:[TestMatch switchArray:(id)[@{
		@"expr":[[EArrayDecl:[@[] mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3262 copy],
		@"max":[@3264 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"141", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"_" mutableCopy] v2:[TestMatch switchArray:(id)[@{
		@"expr":[[EConst:[CInt:[@"2" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3296 copy],
		@"max":[@3297 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"142", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"[EConst(CInt(22))]" mutableCopy] v2:[TestMatch switchArray:(id)[@{
		@"expr":[[EArrayDecl:[@[[@{
		@"expr":[[EConst:[CInt:[@"22" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3347 copy],
		@"max":[@3349 copy],
	} mutableCopy] copy],
	} mutableCopy]] mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3346 copy],
		@"max":[@3350 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"143", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"[EConst(CInt(22)),EConst(CString(foo))]" mutableCopy] v2:[TestMatch switchArray:(id)[@{
		@"expr":[[EArrayDecl:[@[[@{
		@"expr":[[EConst:[CInt:[@"22" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3421 copy],
		@"max":[@3423 copy],
	} mutableCopy] copy],
	} mutableCopy], [@{
		@"expr":[[EConst:[CString:[@"foo" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3424 copy],
		@"max":[@3429 copy],
	} mutableCopy] copy],
	} mutableCopy]] mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3420 copy],
		@"max":[@3430 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"144", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"_" mutableCopy] v2:[TestMatch switchArray:(id)[@{
		@"expr":[[EArrayDecl:[@[[@{
		@"expr":[[EConst:[CInt:[@"22" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3463 copy],
		@"max":[@3465 copy],
	} mutableCopy] copy],
	} mutableCopy], [@{
		@"expr":[[EConst:[CString:[@"foo" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3467 copy],
		@"max":[@3472 copy],
	} mutableCopy] copy],
	} mutableCopy], [@{
		@"expr":[[EConst:[CString:[@"bar" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3474 copy],
		@"max":[@3479 copy],
	} mutableCopy] copy],
	} mutableCopy]] mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3462 copy],
		@"max":[@3480 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"145", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"0" mutableCopy] v2:[TestMatch switchArray2:[@[[@"a" mutableCopy], [@"b" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"147", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"1" mutableCopy] v2:[TestMatch switchArray2:[@[[@"a" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"148", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"2" mutableCopy] v2:[TestMatch switchArray2:[@[[@"b" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"149", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"3:c" mutableCopy] v2:[TestMatch switchArray2:[@[[@"c" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"150", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"4:a,a" mutableCopy] v2:[TestMatch switchArray2:[@[[@"a" mutableCopy], [@"a" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"151", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"4:b,a" mutableCopy] v2:[TestMatch switchArray2:[@[[@"b" mutableCopy], [@"a" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"152", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"5:3" mutableCopy] v2:[TestMatch switchArray2:[@[[@"a" mutableCopy], [@"a" mutableCopy], [@"a" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"153", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"6" mutableCopy] v2:[TestMatch switchArray2:[@[] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"154", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"7" mutableCopy] v2:[TestMatch switchArray2:[@[[@"a" mutableCopy], [@"a" mutableCopy], [@"a" mutableCopy], [@"b" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"155", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"EConst(CString(foobar)):12" mutableCopy] v2:[TestMatch switchCrazy:(id)[@{
		@"expr":[[EUntyped:[@{
		@"expr":[[EParenthesis:[@{
		@"expr":[[EArray:[@{
		@"expr":[[EConst:[CString:[@"foobar" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3881 copy],
		@"max":[@3889 copy],
	} mutableCopy] copy],
	} mutableCopy] e2:[@{
		@"expr":[[EConst:[CInt:[@"12" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3890 copy],
		@"max":[@3892 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3881 copy],
		@"max":[@3893 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3880 copy],
		@"max":[@3894 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3872 copy],
		@"max":[@3894 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"157", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"1" mutableCopy] v2:[TestMatch switchGuard:(id)[@{
		@"expr":[[EConst:[CString:[@"foobar" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3927 copy],
		@"max":[@3935 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"159", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"2" mutableCopy] v2:[TestMatch switchGuard:(id)[@{
		@"expr":[[EConst:[CString:[@"barfoo" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3967 copy],
		@"max":[@3975 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"160", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"3" mutableCopy] v2:[TestMatch switchGuard:(id)[@{
		@"expr":[[EConst:[CInt:[@"2" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@4007 copy],
		@"max":[@4008 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"161", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"4" mutableCopy] v2:[TestMatch switchGuard:(id)[@{
		@"expr":[[EConst:[CInt:[@"5" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@4040 copy],
		@"max":[@4041 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"162", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"4" mutableCopy] v2:[TestMatch switchGuard:(id)[@{
		@"expr":[[EConst:[CString:[@"bazfoo" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@4073 copy],
		@"max":[@4081 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"163", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"5" mutableCopy] v2:[TestMatch switchGuard:(id)[@{
		@"expr":[[EArrayDecl:[@[] mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@4113 copy],
		@"max":[@4115 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"164", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"0" mutableCopy] v2:((NSMutableString)self.__r__ BOOL _g = YES; int _g1 = 1; 
	NSMutableString *_g2 = [@"foo" mutableCopy]
	__r__ = ((NSMutableString)self.__r__2 switch (_g){
		case YES:__r__2 = ((id)self.__r__3 switch (_g1){
			case 1:__r__3 = ((id)self.__r__4 switch (_g2){
				case [@"foo" mutableCopy]:__r__4 = [@"0" mutableCopy];
				break;
				default:__r__4 = [@"1" mutableCopy];break;
			}
			return __r__4{
				
				id* __r__4}
			}(self));
			break;
			default:__r__3 = [@"_" mutableCopy];break;
		}
		return __r__3{
			
			id* __r__3}
		}(self));
		break;
		default:__r__2 = [@"_" mutableCopy];break;
	}
	return __r__2{
		
		NSMutableString* __r__2}
	}(self))
	return __r__{
		
		NSMutableString* __r__}
	}(self)) pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"166", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"0" mutableCopy] v2:((NSMutableString)self.__r__5 BOOL _g3 = YES; int _g4 = 1; 
	NSMutableString *_g5 = [@"foo" mutableCopy]
	__r__5 = ((NSMutableString)self.__r__6 switch (_g3){
		case YES:__r__6 = ((id)self.__r__7 switch (_g4){
			case 1:__r__7 = ((id)self.__r__8 switch (_g5){
				case [@"foo" mutableCopy]:__r__8 = [@"0" mutableCopy];
				break;
				default:__r__8 = [@"1" mutableCopy];break;
			}
			return __r__8{
				
				id* __r__8}
			}(self));
			break;
			default:__r__7 = [@"_" mutableCopy];break;
		}
		return __r__7{
			
			id* __r__7}
		}(self));
		break;
		default:__r__6 = [@"_" mutableCopy];break;
	}
	return __r__6{
		
		NSMutableString* __r__6}
	}(self))
	return __r__5{
		
		NSMutableString* __r__5}
	}(self)) pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"172", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"1" mutableCopy] v2:((NSMutableString)self.__r__9 BOOL _g6 = YES; int _g7 = 1; 
	NSMutableString *_g8 = [@"bar" mutableCopy]
	__r__9 = ((NSMutableString)self.__r__10 switch (_g6){
		case YES:__r__10 = ((id)self.__r__11 switch (_g7){
			case 1:__r__11 = ((id)self.__r__12 switch (_g8){
				case [@"foo" mutableCopy]:__r__12 = [@"0" mutableCopy];
				break;
				default:__r__12 = [@"1" mutableCopy];break;
			}
			return __r__12{
				
				id* __r__12}
			}(self));
			break;
			default:__r__11 = [@"_" mutableCopy];break;
		}
		return __r__11{
			
			id* __r__11}
		}(self));
		break;
		default:__r__10 = [@"_" mutableCopy];break;
	}
	return __r__10{
		
		NSMutableString* __r__10}
	}(self))
	return __r__9{
		
		NSMutableString* __r__9}
	}(self)) pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"178", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"_" mutableCopy] v2:((NSMutableString)self.__r__13 BOOL _g9 = NO; int _g10 = 1; 
	NSMutableString *_g11 = [@"foo" mutableCopy]
	__r__13 = ((NSMutableString)self.__r__14 switch (_g9){
		case YES:__r__14 = ((id)self.__r__15 switch (_g10){
			case 1:__r__15 = ((id)self.__r__16 switch (_g11){
				case [@"foo" mutableCopy]:__r__16 = [@"0" mutableCopy];
				break;
				default:__r__16 = [@"1" mutableCopy];break;
			}
			return __r__16{
				
				id* __r__16}
			}(self));
			break;
			default:__r__15 = [@"_" mutableCopy];break;
		}
		return __r__15{
			
			id* __r__15}
		}(self));
		break;
		default:__r__14 = [@"_" mutableCopy];break;
	}
	return __r__14{
		
		NSMutableString* __r__14}
	}(self))
	return __r__13{
		
		NSMutableString* __r__13}
	}(self)) pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"184", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"1" mutableCopy] v2:((NSMutableString)self.__r__17 int _g12 = 1; int _g13 = 2
	__r__17 = ((NSMutableString)self.__r__18 switch (_g12){
		case 0:__r__18 = ((id)self.__r__19 switch (_g13){
			case 0:__r__19 = [@"1" mutableCopy];
			break;
			default:__r__19 = [@"_" mutableCopy];break;
		}
		return __r__19{
			
			id* __r__19}
		}(self));
		break;
		case 1:__r__18 = ((id)self.__r__20 switch (_g13){
			case 2:__r__20 = [@"1" mutableCopy];
			break;
			case 1:__r__20 = [@"2" mutableCopy];
			break;
			default:__r__20 = [@"_" mutableCopy];break;
		}
		return __r__20{
			
			id* __r__20}
		}(self));
		break;
		default:__r__18 = [@"_" mutableCopy];break;
	}
	return __r__18{
		
		NSMutableString* __r__18}
	}(self))
	return __r__17{
		
		NSMutableString* __r__17}
	}(self)) pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"190", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	
	A *t = [TA:[@"foo" mutableCopy]];
	[self eq:[@"0" mutableCopy] v2:((NSMutableString)self.__r__21 
	enum s = e22 (t)
	switch ( e22.index ) {
		
		case 0:
		
		var MATCH t_eTA_0 : id = e22.params[0]__r__21 = ((id)self.__r__23 switch (t_eTA_0){
			case [@"foo" mutableCopy]:__r__23 = [@"0" mutableCopy];
			break;
			default:__r__23 = [@"1" mutableCopy];break;
		}
		return __r__23{
			
			id* __r__23}
		}(self));break
		case 2:
		__r__21 = [@"2" mutableCopy];break
	}
	return __r__21{
		
		NSMutableString* __r__21}
	}(self)) pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"197", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
}
- (void) testTuple{
	
	id test = ^(int x, int z, int y){
		
		return ^(NSMutableString*)switch (x){
			case 1:__r__ = ^(id)switch (z){
				case 1:__r__2 = ^(id)switch (y){
					case 2:__r__3 = [[@"0|x:" mutableCopy] stringByAppendingString:z];
					break;
					default:__r__3 = [[[[@"2|y:" mutableCopy] stringByAppendingString:z] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:y];break;
				}
				return __r__3{
					
					id* __r__3}
				}();
				break;
				case 2:__r__2 = [[@"0|x:" mutableCopy] stringByAppendingString:y];
				break;
				case 3:__r__2 = ^(id)switch (y){
					case 2:__r__4 = [[@"0|x:" mutableCopy] stringByAppendingString:z];
					break;
					case 4:__r__4 = [[@"1|z:" mutableCopy] stringByAppendingString:x];
					break;
					default:__r__4 = [[[[@"2|y:" mutableCopy] stringByAppendingString:z] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:y];break;
				}
				return __r__4{
					
					id* __r__4}
				}();
				break;
				default:__r__2 = ^(id)switch (y){
					case 2:__r__5 = [[@"0|x:" mutableCopy] stringByAppendingString:z];
					break;
					default:__r__5 = [[[[@"2|y:" mutableCopy] stringByAppendingString:z] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:y];break;
				}
				return __r__5{
					
					id* __r__5}
				}();break;
			}
			return __r__2{
				
				id* __r__2}
			}();
			break;
			case 3:__r__ = ^(id)switch (z){
				case 1:__r__6 = ^(id)switch (y){
					case 2:__r__7 = [[@"0|x:" mutableCopy] stringByAppendingString:x];
					break;
					case 4:__r__7 = [[@"1|z:" mutableCopy] stringByAppendingString:z];
					break;
					default:__r__7 = [[[[[[@"_:x:" mutableCopy] stringByAppendingString:x] stringByAppendingString:[@",y:" mutableCopy]] stringByAppendingString:z] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:y];break;
				}
				return __r__7{
					
					id* __r__7}
				}();
				break;
				case 4:__r__6 = [[@"1|z:" mutableCopy] stringByAppendingString:y];
				break;
				case 3:__r__6 = ^(id)switch (y){
					case 4:__r__8 = [[@"1|z:" mutableCopy] stringByAppendingString:z];
					break;
					default:__r__8 = [[[[[[@"_:x:" mutableCopy] stringByAppendingString:x] stringByAppendingString:[@",y:" mutableCopy]] stringByAppendingString:z] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:y];break;
				}
				return __r__8{
					
					id* __r__8}
				}();
				break;
				default:__r__6 = ^(id)switch (y){
					case 4:__r__9 = [[@"1|z:" mutableCopy] stringByAppendingString:z];
					break;
					default:__r__9 = [[[[[[@"_:x:" mutableCopy] stringByAppendingString:x] stringByAppendingString:[@",y:" mutableCopy]] stringByAppendingString:z] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:y];break;
				}
				return __r__9{
					
					id* __r__9}
				}();break;
			}
			return __r__6{
				
				id* __r__6}
			}();
			break;
			case 2:__r__ = ^(id)switch (z){
				case 1:__r__10 = ^(id)switch (y){
					case 2:__r__11 = [[@"0|x:" mutableCopy] stringByAppendingString:x];
					break;
					default:__r__11 = [[[[@"2|y:" mutableCopy] stringByAppendingString:y] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:z];break;
				}
				return __r__11{
					
					id* __r__11}
				}();
				break;
				case 3:__r__10 = ^(id)switch (y){
					case 4:__r__12 = [[@"1|z:" mutableCopy] stringByAppendingString:x];
					break;
					default:__r__12 = [[[[@"2|y:" mutableCopy] stringByAppendingString:y] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:z];break;
				}
				return __r__12{
					
					id* __r__12}
				}();
				break;
				default:__r__10 = [[[[@"2|y:" mutableCopy] stringByAppendingString:y] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:z];break;
			}
			return __r__10{
				
				id* __r__10}
			}();
			break;
			default:__r__ = ^(id)switch (z){
				case 1:__r__13 = ^(id)switch (y){
					case 2:__r__14 = [[@"0|x:" mutableCopy] stringByAppendingString:x];
					break;
					default:__r__14 = [[[[[[@"_:x:" mutableCopy] stringByAppendingString:x] stringByAppendingString:[@",y:" mutableCopy]] stringByAppendingString:z] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:y];break;
				}
				return __r__14{
					
					id* __r__14}
				}();
				break;
				case 3:__r__13 = ^(id)switch (y){
					case 4:__r__15 = [[@"1|z:" mutableCopy] stringByAppendingString:x];
					break;
					default:__r__15 = [[[[[[@"_:x:" mutableCopy] stringByAppendingString:x] stringByAppendingString:[@",y:" mutableCopy]] stringByAppendingString:z] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:y];break;
				}
				return __r__15{
					
					id* __r__15}
				}();
				break;
				default:__r__13 = [[[[[[@"_:x:" mutableCopy] stringByAppendingString:x] stringByAppendingString:[@",y:" mutableCopy]] stringByAppendingString:z] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:y];break;
			}
			return __r__13{
				
				id* __r__13}
			}();break;
		}
		return __r__{
			
			NSMutableString* __r__}
		}();
	};
	[self eq:[@"0|x:9" mutableCopy] v2:[test:9 b:1 c:2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"211", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"0|x:9" mutableCopy] v2:[test:1 b:2 c:9] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"212", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"0|x:9" mutableCopy] v2:[test:1 b:9 c:2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"213", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"1|z:12" mutableCopy] v2:[test:3 b:4 c:12] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"214", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"1|z:12" mutableCopy] v2:[test:12 b:3 c:4] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"215", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"1|z:12" mutableCopy] v2:[test:3 b:12 c:4] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"216", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"2|y:9,z:8" mutableCopy] v2:[test:1 b:9 c:8] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"217", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"2|y:9,z:8" mutableCopy] v2:[test:2 b:8 c:9] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"218", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"_:x:9,y:8,z:7" mutableCopy] v2:[test:9 b:8 c:7] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"219", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
}
- (void) testGrouping{
	
	id test = ^(int val){
		
		return ^(NSMutableString*)switch (val){
			case 1:case 2:case 3:__r__ = [@"0" mutableCopy];
			break;
			case 4:__r__ = ( (val == 5) ? [@"1" mutableCopy] : [@"2" mutableCopy]);
			break;
			case 5:__r__ = ( (val == 5) ? [@"1" mutableCopy] : [@"2" mutableCopy]);
			break;
			case 6:__r__ = ( (val == 5) ? [@"1" mutableCopy] : [@"2" mutableCopy]);
			break;
			case 8:case 9:__r__ = [@"3" mutableCopy];
			break;
			default:__r__ = [[@"_:" mutableCopy] stringByAppendingString:val];break;
		}
		return __r__{
			
			NSMutableString* __r__}
		}();
	};
	
	NSMutableArray *results = [@[[@"_:0" mutableCopy], [@"0" mutableCopy], [@"0" mutableCopy], [@"0" mutableCopy], [@"2" mutableCopy], [@"1" mutableCopy], [@"2" mutableCopy], [@"_:7" mutableCopy], [@"3" mutableCopy], [@"3" mutableCopy], [@"_:10" mutableCopy]] mutableCopy];
	{
		
		int _g1 = 0; int _g = results.length;
		while (_g1 < _g) {
			
			int i = _g1++;
			[self eq:((NSMutableArray*)[results hx_objectAtIndex:i]) v2:[test:i] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"232", @"className":@"unit.TestMatch", @"methodName":@"testGrouping"}];
		}
	}
}
- (void) testSubtyping{
	
	
	InitBase *c = [[InitBase alloc] init];
	
	NSMutableString *r = ((NSMutableString)self.__r__ switch (c.s){
		case [@"foo" mutableCopy]:__r__ = [@"s = foo" mutableCopy];
		break;
		default:__r__ = [@"_" mutableCopy];break;
	}
	return __r__{
		
		NSMutableString* __r__}
	}(self));
	[self eq:[@"s = foo" mutableCopy] v2:r pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"244", @"className":@"unit.TestMatch", @"methodName":@"testSubtyping"}];
	[self eq:[@"0" mutableCopy] v2:[TestMatch switchStructure:[@{
		@"foo":[[@"val1" mutableCopy] copy],
		@"bar":[[@"val2" mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"246", @"className":@"unit.TestMatch", @"methodName":@"testSubtyping"}];
	[self eq:[@"1" mutableCopy] v2:[TestMatch switchStructure:[@{
		@"foo":[[@"val1" mutableCopy] copy],
		@"bar":[[@"val1" mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"247", @"className":@"unit.TestMatch", @"methodName":@"testSubtyping"}];
	[self eq:[@"2" mutableCopy] v2:[TestMatch switchStructure:[@{
		@"foo":[[@"val2" mutableCopy] copy],
		@"bar":[[@"val2" mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"248", @"className":@"unit.TestMatch", @"methodName":@"testSubtyping"}];
	[self eq:[@"val1" mutableCopy] v2:[TestMatch switchStructure:[@{
		@"foo":[[@"val2" mutableCopy] copy],
		@"bar":[[@"val1" mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"249", @"className":@"unit.TestMatch", @"methodName":@"testSubtyping"}];
}
- (void) testGadt{
	
	[self eq:[@"<=1" mutableCopy] v2:[TestMatch toStringX:[U1:1]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"262", @"className":@"unit.TestMatch", @"methodName":@"testGadt"}];
	[self eq:[@">1" mutableCopy] v2:[TestMatch toStringX:[U1:2]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"263", @"className":@"unit.TestMatch", @"methodName":@"testGadt"}];
	[self eq:[@"U2" mutableCopy] v2:[TestMatch toStringX:U2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"264", @"className":@"unit.TestMatch", @"methodName":@"testGadt"}];
}
- (void) testClassSwitch{
	
	[self eq:[@"String" mutableCopy] v2:[TestMatch switchClass:NSMutableString] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"268", @"className":@"unit.TestMatch", @"methodName":@"testClassSwitch"}];
	[self eq:[@"unit.MyClass" mutableCopy] v2:[TestMatch switchClass:MyClass] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"269", @"className":@"unit.TestMatch", @"methodName":@"testClassSwitch"}];
	[self eq:[@"other: unit.TestMatch" mutableCopy] v2:[TestMatch switchClass:TestMatch] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"270", @"className":@"unit.TestMatch", @"methodName":@"testClassSwitch"}];
}
- (void) testOr{
	
	id i1 = (id)[@{
		@"expr":[[EConst:[CInt:[@"1" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@6687 copy],
		@"max":[@6688 copy],
	} mutableCopy] copy],
	} mutableCopy];
	id i2 = (id)[@{
		@"expr":[[EConst:[CInt:[@"2" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@6707 copy],
		@"max":[@6708 copy],
	} mutableCopy] copy],
	} mutableCopy];
	id f1 = (id)[@{
		@"expr":[[EConst:[CFloat:[@"3.9" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@6727 copy],
		@"max":[@6730 copy],
	} mutableCopy] copy],
	} mutableCopy];
	id f2 = (id)[@{
		@"expr":[[EConst:[CFloat:[@"4.8" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@6749 copy],
		@"max":[@6752 copy],
	} mutableCopy] copy],
	} mutableCopy];
	[self eq:[@"11" mutableCopy] v2:[TestMatch orMatch:i1 e2:i1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"278", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"12" mutableCopy] v2:[TestMatch orMatch:i1 e2:i2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"279", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"13.9" mutableCopy] v2:[TestMatch orMatch:i1 e2:f1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"280", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"14.8" mutableCopy] v2:[TestMatch orMatch:i1 e2:f2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"281", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"21" mutableCopy] v2:[TestMatch orMatch:i2 e2:i1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"283", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"22" mutableCopy] v2:[TestMatch orMatch:i2 e2:i2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"284", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"23.9" mutableCopy] v2:[TestMatch orMatch:i2 e2:f1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"285", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"24.8" mutableCopy] v2:[TestMatch orMatch:i2 e2:f2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"286", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"3.91" mutableCopy] v2:[TestMatch orMatch:f1 e2:i1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"288", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"3.92" mutableCopy] v2:[TestMatch orMatch:f1 e2:i2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"289", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"3.93.9" mutableCopy] v2:[TestMatch orMatch:f1 e2:f1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"290", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"3.94.8" mutableCopy] v2:[TestMatch orMatch:f1 e2:f2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"291", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"4.81" mutableCopy] v2:[TestMatch orMatch:f2 e2:i1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"293", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"4.82" mutableCopy] v2:[TestMatch orMatch:f2 e2:i2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"294", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"4.83.9" mutableCopy] v2:[TestMatch orMatch:f2 e2:f1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"295", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"4.84.8" mutableCopy] v2:[TestMatch orMatch:f2 e2:f2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"296", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
}
- (void) testStaticNull{
	
	
	NE *v = [A];
	
	NSMutableString *r = ((NSMutableString)self.__r__ 
	enum s = e2 (v)
	switch ( e2.index ) {
		
		case 0:
		
		var MATCH x : int = e2.params[0]__r__ = ( (x == nil) ? [@"null" mutableCopy] : [@"not null" mutableCopy]);break
	}
	return __r__{
		
		NSMutableString* __r__}
	}(self));
	[self eq:[@"null" mutableCopy] v2:r pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"306", @"className":@"unit.TestMatch", @"methodName":@"testStaticNull"}];
}
- (void) testNonExhaustiveness{
	
	[self eq:[@"Unmatched patterns: false" mutableCopy] v2:[@"Unmatched patterns: false" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"317", @"className":@"unit.TestMatch", @"methodName":@"testNonExhaustiveness"}];
	[self eq:[@"Unmatched patterns: OpNegBits | OpNeg" mutableCopy] v2:[@"Unmatched patterns: OpNegBits | OpNeg" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"320", @"className":@"unit.TestMatch", @"methodName":@"testNonExhaustiveness"}];
	[self eq:[@"Unmatched patterns: Node(Leaf(_),_)" mutableCopy] v2:[@"Unmatched patterns: Node(Leaf(_),_)" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"325", @"className":@"unit.TestMatch", @"methodName":@"testNonExhaustiveness"}];
	[self eq:[@"Unmatched patterns: Leaf" mutableCopy] v2:[@"Unmatched patterns: Leaf" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"329", @"className":@"unit.TestMatch", @"methodName":@"testNonExhaustiveness"}];
	[self eq:[@"Unmatched patterns: Leaf(_)" mutableCopy] v2:[@"Unmatched patterns: Leaf(_)" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"333", @"className":@"unit.TestMatch", @"methodName":@"testNonExhaustiveness"}];
	[self eq:[@"Unmatched patterns: [_,false,_]" mutableCopy] v2:[@"Unmatched patterns: [_,false,_]" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"337", @"className":@"unit.TestMatch", @"methodName":@"testNonExhaustiveness"}];
	BOOL x = YES;
	[self eq:[@"Unmatched patterns: null" mutableCopy] v2:[@"Unmatched patterns: null" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"341", @"className":@"unit.TestMatch", @"methodName":@"testNonExhaustiveness"}];
	
	Tree *t = nil;
	[self eq:[@"Unmatched patterns: null" mutableCopy] v2:[@"Unmatched patterns: null" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"346", @"className":@"unit.TestMatch", @"methodName":@"testNonExhaustiveness"}];
}
- (void) testInvalidBinding{
	
	[self eq:[@"Variable y must appear exactly once in each sub-pattern" mutableCopy] v2:[@"Variable y must appear exactly once in each sub-pattern" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"353", @"className":@"unit.TestMatch", @"methodName":@"testInvalidBinding"}];
	[self eq:[@"Variable y must appear exactly once in each sub-pattern" mutableCopy] v2:[@"Variable y must appear exactly once in each sub-pattern" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"356", @"className":@"unit.TestMatch", @"methodName":@"testInvalidBinding"}];
	[self eq:[@"Variable x must appear exactly once in each sub-pattern" mutableCopy] v2:[@"Variable x must appear exactly once in each sub-pattern" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"359", @"className":@"unit.TestMatch", @"methodName":@"testInvalidBinding"}];
	[self eq:[@"Variable l must appear exactly once in each sub-pattern" mutableCopy] v2:[@"Variable l must appear exactly once in each sub-pattern" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"362", @"className":@"unit.TestMatch", @"methodName":@"testInvalidBinding"}];
	[self eq:[@"Variable l must appear exactly once in each sub-pattern" mutableCopy] v2:[@"Variable l must appear exactly once in each sub-pattern" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"365", @"className":@"unit.TestMatch", @"methodName":@"testInvalidBinding"}];
	[self eq:[@"String should be unit.Tree<String>" mutableCopy] v2:[@"String should be unit.Tree<String>" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"368", @"className":@"unit.TestMatch", @"methodName":@"testInvalidBinding"}];
}
- (void) testNullPattern{
	
	int i = nil;
	int r = ( (nil == i) ? 2 : ((id)self.__r__ switch (i){
		case 1:__r__ = 1;
		break;
		default:__r__ = 3;break;
	}
	return __r__{
		
		id* __r__}
	}(self)));
	[self eq:2 v2:r pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"380", @"className":@"unit.TestMatch", @"methodName":@"testNullPattern"}];
	
	Tree *t = nil;
	int r1 = ( (nil == t) ? ( (i != nil) ? 2 : 3) : ((id)self.__r__2 
	enum s = e3 (t)
	switch ( e3.index ) {
		
		case 0:
		__r__2 = 1;break
		case 1:
		__r__2 = 4;break
	}
	return __r__2{
		
		id* __r__2}
	}(self)));
	[self eq:r1 v2:3 pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"396", @"className":@"unit.TestMatch", @"methodName":@"testNullPattern"}];
	id e1 = (id)[@{
		@"expr":[[EIf:[@{
		@"expr":[[EConst:[CInt:[@"1" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@10011 copy],
		@"max":[@10012 copy],
	} mutableCopy] copy],
	} mutableCopy] eif:[@{
		@"expr":[[EConst:[CInt:[@"2" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@10014 copy],
		@"max":[@10015 copy],
	} mutableCopy] copy],
	} mutableCopy] eelse:nil] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@10007 copy],
		@"max":[@10015 copy],
	} mutableCopy] copy],
	} mutableCopy];
	id e2 = (id)[@{
		@"expr":[[EIf:[@{
		@"expr":[[EConst:[CInt:[@"1" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@10038 copy],
		@"max":[@10039 copy],
	} mutableCopy] copy],
	} mutableCopy] eif:[@{
		@"expr":[[EConst:[CInt:[@"2" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@10041 copy],
		@"max":[@10042 copy],
	} mutableCopy] copy],
	} mutableCopy] eelse:[@{
		@"expr":[[EConst:[CInt:[@"3" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@10048 copy],
		@"max":[@10049 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@10034 copy],
		@"max":[@10049 copy],
	} mutableCopy] copy],
	} mutableCopy];
	id matchIf = ^(id e){
		
		return ^(int)
		enum s = e5 (e expr)
		switch ( e5.index ) {
			
			case 15:
			
			var MATCH e_fexpr_eEIf_2 : id = e5.params[2], MATCH e_fexpr_eEIf_1 : id = e5.params[1], MATCH e_fexpr_eEIf_0 : id = e5.params[0]__r__4 = ( (nil == e_fexpr_eEIf_2) ? 1 : 2);break
			default:__r__4 = 3;break
		}
		return __r__4{
			
			int* __r__4}
		}();
	};
	[self eq:1 v2:[matchIf:e1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"407", @"className":@"unit.TestMatch", @"methodName":@"testNullPattern"}];
	[self eq:2 v2:[matchIf:e2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"408", @"className":@"unit.TestMatch", @"methodName":@"testNullPattern"}];
	
	Tree *t1 = [Leaf:[@"foo" mutableCopy]];
	id f = ^(Tree *t2){
		
		return ^(NSMutableString*)
		enum s = e7 (t2)
		switch ( e7.index ) {
			
			case 0:
			
			var MATCH e : id = e7.params[0]__r__6 = ( (nil == e) ? [@"null" mutableCopy] : ^(id)switch (e){
				default:__r__8 = e;break;
			}
			return __r__8{
				
				id* __r__8}
			}());break
			case 1:
			__r__6 = [@"default" mutableCopy];break
		}
		return __r__6{
			
			NSMutableString* __r__6}
		}();
	};
	[self eq:[f:t1] v2:[@"foo" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"416", @"className":@"unit.TestMatch", @"methodName":@"testNullPattern"}];
}

@end
