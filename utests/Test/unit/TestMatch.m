//
//  TestMatch
//  Test
//
//  Source generated by Haxe Objective-C target
//

#import "../unit/TestMatch.h"

@implementation TestMatch

+ (NSMutableString*) switchNormal:(id)e{
	return ^(NSMutableString*)
	var $e2 : enum =  (e[@"expr"])
	switch ( $e2.index ) {
		
		case 0:
		
		var MATCH e_fexpr_eEConst_0 : Expr = $e2.params[0]{
			__r__ = ^(id)
			var $e4 : enum =  (e_fexpr_eEConst_0)
			switch ( $e4.index ) {
				
				case 2:
				
				var MATCH e_fexpr_eEConst_0_eCString_0 : NSMutableString = $e4.params[0]{
					__r__3 = e_fexpr_eEConst_0_eCString_0}break
				default:{
					__r__3 = [@"not_found" mutableCopy]}break
			}
			return __r__3{
				
				id* __r__3}
			}()}break
		case 4:
		
		var MATCH e_fexpr_eEParenthesis_0 : id = $e2.params[0]{
			__r__ = ^(id)
			var $e6 : enum =  (e_fexpr_eEParenthesis_0[@"expr"])
			switch ( $e6.index ) {
				
				case 0:
				
				var MATCH e_fexpr_eEParenthesis_0_fexpr_eEConst_0 : Expr = $e6.params[0]{
					__r__5 = ^(id)
					var $e8 : enum =  (e_fexpr_eEParenthesis_0_fexpr_eEConst_0)
					switch ( $e8.index ) {
						
						case 2:
						
						var MATCH e_fexpr_eEParenthesis_0_fexpr_eEConst_0_eCString_0 : NSMutableString = $e8.params[0]{
							__r__7 = e_fexpr_eEParenthesis_0_fexpr_eEConst_0_eCString_0}break
						default:{
							__r__7 = [@"not_found" mutableCopy]}break
					}
					return __r__7{
						
						id* __r__7}
					}()}break
				default:{
					__r__5 = [@"not_found" mutableCopy]}break
			}
			return __r__5{
				
				id* __r__5}
			}()}break
		case 22:
		
		var MATCH e_fexpr_eEUntyped_0 : id = $e2.params[0]{
			__r__ = ^(id)
			var $e10 : enum =  (e_fexpr_eEUntyped_0[@"expr"])
			switch ( $e10.index ) {
				
				case 0:
				
				var MATCH e_fexpr_eEUntyped_0_fexpr_eEConst_0 : Expr = $e10.params[0]{
					__r__9 = ^(id)
					var $e12 : enum =  (e_fexpr_eEUntyped_0_fexpr_eEConst_0)
					switch ( $e12.index ) {
						
						case 2:
						
						var MATCH e_fexpr_eEUntyped_0_fexpr_eEConst_0_eCString_0 : NSMutableString = $e12.params[0]{
							__r__11 = e_fexpr_eEUntyped_0_fexpr_eEConst_0_eCString_0}break
						default:{
							__r__11 = [@"not_found" mutableCopy]}break
					}
					return __r__11{
						
						id* __r__11}
					}()}break
				default:{
					__r__9 = [@"not_found" mutableCopy]}break
			}
			return __r__9{
				
				id* __r__9}
			}()}break
		case 3:
		
		var MATCH e_fexpr_eEField_1 : NSMutableString = $e2.params[1], MATCH e_fexpr_eEField_0 : id = $e2.params[0]{
			__r__ = e_fexpr_eEField_1}break
		case 1:
		
		var MATCH e_fexpr_eEArray_1 : id = $e2.params[1], MATCH e_fexpr_eEArray_0 : id = $e2.params[0]{
			__r__ = ^(id)
			var $e14 : enum =  (e_fexpr_eEArray_1[@"expr"])
			switch ( $e14.index ) {
				
				case 0:
				
				var MATCH e_fexpr_eEArray_1_fexpr_eEConst_0 : Expr = $e14.params[0]{
					__r__13 = ^(id)
					var $e16 : enum =  (e_fexpr_eEArray_1_fexpr_eEConst_0)
					switch ( $e16.index ) {
						
						case 0:
						
						var MATCH e_fexpr_eEArray_1_fexpr_eEConst_0_eCInt_0 : NSMutableString = $e16.params[0]{
							__r__15 = [Std string:e_fexpr_eEArray_1_fexpr_eEConst_0_eCInt_0]}break
						case 1:
						
						var MATCH e_fexpr_eEArray_1_fexpr_eEConst_0_eCFloat_0 : NSMutableString = $e16.params[0]{
							__r__15 = [Std string:e_fexpr_eEArray_1_fexpr_eEConst_0_eCFloat_0]}break
						default:{
							__r__15 = [@"not_found" mutableCopy]}break
					}
					return __r__15{
						
						id* __r__15}
					}()}break
				default:{
					__r__13 = [@"not_found" mutableCopy]}break
			}
			return __r__13{
				
				id* __r__13}
			}()}break
		case 14:
		
		var MATCH e_fexpr_eEIn_1 : id = $e2.params[1], MATCH e_fexpr_eEIn_0 : id = $e2.params[0]{
			__r__ = [Std string:e_fexpr_eEIn_1[@"expr"]]}break
		default:{
			__r__ = [@"not_found" mutableCopy]}break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (Expr*) switchCapture:(id)e{
	return ^(Expr*)
	var $e2 : enum =  (e[@"expr"])
	switch ( $e2.index ) {
		
		case 0:
		
		var MATCH e_fexpr_eEConst_0 : Expr = $e2.params[0]{
			__r__ = ^(id)
			var $e4 : enum =  (e_fexpr_eEConst_0)
			switch ( $e4.index ) {
				
				case 2:
				
				var MATCH e_fexpr_eEConst_0_eCString_0 : NSMutableString = $e4.params[0]{
					__r__3 = ^(id)switch (e_fexpr_eEConst_0_eCString_0){
						case [@"foobar" mutableCopy]:{
							__r__5 = e_fexpr_eEConst_0}break;
						default:{
							__r__5 = nil}break;
					}
					return __r__5{
						
						id* __r__5}
					}()}break
				case 0:
				
				var MATCH e_fexpr_eEConst_0_eCInt_0 : NSMutableString = $e4.params[0]{
					__r__3 = ^(id)switch (e_fexpr_eEConst_0_eCInt_0){
						case [@"9" mutableCopy]:{
							__r__6 = e_fexpr_eEConst_0}break;
						default:{
							__r__6 = nil}break;
					}
					return __r__6{
						
						id* __r__6}
					}()}break
				default:{
					__r__3 = nil}break
			}
			return __r__3{
				
				id* __r__3}
			}()}break
		default:{
			__r__ = nil}break
	}
	return __r__{
		
		Expr* __r__}
	}();
}
+ (NSMutableString*) switchArray:(id)e{
	return ^(NSMutableString*)
	var $e2 : enum =  (e[@"expr"])
	switch ( $e2.index ) {
		
		case 6:
		
		var MATCH e_fexpr_eEArrayDecl_0 : NSMutableArray = $e2.params[0]{
			__r__ = ^(id)switch (e_fexpr_eEArrayDecl_0.length){
				case 0:{
					__r__3 = [@"[]" mutableCopy]}break;
				case 1:{
					__r__3 = [[[@"[" mutableCopy] stringByAppendingString:[Std string:[e_fexpr_eEArrayDecl_0 hx_objectAtIndex:@"0"][@"expr"]]] stringByAppendingString:[@"]" mutableCopy]]}break;
				case 2:{
					__r__3 = [[[[[@"[" mutableCopy] stringByAppendingString:[Std string:[e_fexpr_eEArrayDecl_0 hx_objectAtIndex:@"0"][@"expr"]]] stringByAppendingString:[@"," mutableCopy]] stringByAppendingString:[Std string:[e_fexpr_eEArrayDecl_0 hx_objectAtIndex:@"1"][@"expr"]]] stringByAppendingString:[@"]" mutableCopy]]}break;
				default:{
					__r__3 = [@"_" mutableCopy]}break;
			}
			return __r__3{
				
				id* __r__3}
			}()}break
		default:{
			__r__ = [@"_" mutableCopy]}break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) switchArray2:(NSMutableArray*)a{
	return ^(NSMutableString*)switch (a.length){
		case 2:{
			__r__ = ^(id)switch ([a hx_objectAtIndex:0]){
				case [@"a" mutableCopy]:{
					__r__2 = ^(id)switch ([a hx_objectAtIndex:1]){
						case [@"b" mutableCopy]:{
							__r__3 = [@"0" mutableCopy]}break;
						default:{
							__r__3 = [[[[@"4:" mutableCopy] stringByAppendingString:[a hx_objectAtIndex:@"0"]] stringByAppendingString:[@"," mutableCopy]] stringByAppendingString:[a hx_objectAtIndex:@"1"]]}break;
					}
					return __r__3{
						
						id* __r__3}
					}()}break;
				default:{
					__r__2 = [[[[@"4:" mutableCopy] stringByAppendingString:[a hx_objectAtIndex:@"0"]] stringByAppendingString:[@"," mutableCopy]] stringByAppendingString:[a hx_objectAtIndex:@"1"]]}break;
			}
			return __r__2{
				
				id* __r__2}
			}()}break;
		case 1:{
			__r__ = ^(id)switch ([a hx_objectAtIndex:0]){
				case [@"a" mutableCopy]:{
					__r__4 = [@"1" mutableCopy]}break;
				case [@"b" mutableCopy]:{
					__r__4 = [@"2" mutableCopy]}break;
				default:{
					__r__4 = [[@"3:" mutableCopy] stringByAppendingString:[a hx_objectAtIndex:@"0"]]}break;
			}
			return __r__4{
				
				id* __r__4}
			}()}break;
		case 0:{
			__r__ = ( (a.length == 3) ? [[@"5:" mutableCopy] stringByAppendingString:a.length] : [@"6" mutableCopy])}break;
		default:{
			__r__ = ( (a.length == 3) ? [[@"5:" mutableCopy] stringByAppendingString:a.length] : [@"7" mutableCopy])}break;
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) switchStructure:(id)a{
	return ^(NSMutableString*)switch (a[@"foo"]){
		case [@"val1" mutableCopy]:{
			__r__ = ^(id)switch (a[@"bar"]){
				case [@"val2" mutableCopy]:{
					__r__2 = [@"0" mutableCopy]}break;
				default:{
					__r__2 = [@"1" mutableCopy]}break;
			}
			return __r__2{
				
				id* __r__2}
			}()}break;
		default:{
			__r__ = ^(id)switch (a[@"bar"]){
				case [@"val2" mutableCopy]:{
					__r__3 = [@"2" mutableCopy]}break;
				default:{
					__r__3 = a[@"bar"]}break;
			}
			return __r__3{
				
				id* __r__3}
			}()}break;
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) switchCrazy:(id)e{
	return ^(NSMutableString*)
	var $e2 : enum =  (e[@"expr"])
	switch ( $e2.index ) {
		
		case 22:
		
		var MATCH e_fexpr_eEUntyped_0 : id = $e2.params[0]{
			__r__ = ^(id)
			var $e4 : enum =  (e_fexpr_eEUntyped_0[@"expr"])
			switch ( $e4.index ) {
				
				case 4:
				
				var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0 : id = $e4.params[0]{
					__r__3 = ^(id)
					var $e6 : enum =  (e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0[@"expr"])
					switch ( $e6.index ) {
						
						case 1:
						
						var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1 : id = $e6.params[1], MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0 : id = $e6.params[0]{
							__r__5 = ^(id)
							var $e8 : enum =  (e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0[@"expr"])
							switch ( $e8.index ) {
								
								case 0:
								
								var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0_fexpr_eEConst_0 : Expr = $e8.params[0]{
									__r__7 = ^(id)
									var $e10 : enum =  (e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0_fexpr_eEConst_0)
									switch ( $e10.index ) {
										
										case 2:
										
										var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0_fexpr_eEConst_0_eCString_0 : NSMutableString = $e10.params[0]{
											__r__9 = ^(id)
											var $e12 : enum =  (e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1[@"expr"])
											switch ( $e12.index ) {
												
												case 0:
												
												var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1_fexpr_eEConst_0 : Expr = $e12.params[0]{
													__r__11 = ^(id)
													var $e14 : enum =  (e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1_fexpr_eEConst_0)
													switch ( $e14.index ) {
														
														case 0:
														
														var MATCH e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1_fexpr_eEConst_0_eCInt_0 : NSMutableString = $e14.params[0]{
															__r__13 = [[[Std string:e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_0[@"expr"]] stringByAppendingString:[@":" mutableCopy]] stringByAppendingString:e_fexpr_eEUntyped_0_fexpr_eEParenthesis_0_fexpr_eEArray_1_fexpr_eEConst_0_eCInt_0]}break
														default:{
															__r__13 = [@"_" mutableCopy]}break
													}
													return __r__13{
														
														id* __r__13}
													}()}break
												default:{
													__r__11 = [@"_" mutableCopy]}break
											}
											return __r__11{
												
												id* __r__11}
											}()}break
										default:{
											__r__9 = [@"_" mutableCopy]}break
									}
									return __r__9{
										
										id* __r__9}
									}()}break
								default:{
									__r__7 = [@"_" mutableCopy]}break
							}
							return __r__7{
								
								id* __r__7}
							}()}break
						default:{
							__r__5 = [@"_" mutableCopy]}break
					}
					return __r__5{
						
						id* __r__5}
					}()}break
				default:{
					__r__3 = [@"_" mutableCopy]}break
			}
			return __r__3{
				
				id* __r__3}
			}()}break
		default:{
			__r__ = [@"_" mutableCopy]}break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) switchGuard:(id)e{
	return ^(NSMutableString*)
	var $e2 : enum =  (e[@"expr"])
	switch ( $e2.index ) {
		
		case 0:
		
		var MATCH e_fexpr_eEConst_0 : Expr = $e2.params[0]{
			__r__ = ^(id)
			var $e4 : enum =  (e_fexpr_eEConst_0)
			switch ( $e4.index ) {
				
				case 2:
				
				var MATCH e_fexpr_eEConst_0_eCString_0 : NSMutableString = $e4.params[0]{
					__r__3 = ( ([StringTools startsWith:e_fexpr_eEConst_0_eCString_0 start:[@"foo" mutableCopy]]) ? [@"1" mutableCopy] : ( ([StringTools startsWith:e_fexpr_eEConst_0_eCString_0 start:[@"bar" mutableCopy]]) ? [@"2" mutableCopy] : [@"4" mutableCopy]))}break
				case 0:
				
				var MATCH e_fexpr_eEConst_0_eCInt_0 : NSMutableString = $e4.params[0]{
					__r__3 = ( (^(BOOL)int _g = [Std parseInt:e_fexpr_eEConst_0_eCInt_0] * 2
					__r__5 = ^(BOOL)switch (_g){
						case 4:{
							__r__6 = YES}break;
						default:{
							__r__6 = NO}break;
					}
					return __r__6{
						
						BOOL* __r__6}
					}()
					return __r__5{
						
						BOOL* __r__5}
					}()) ? [@"3" mutableCopy] : [@"4" mutableCopy])}break
				default:{
					__r__3 = [@"4" mutableCopy]}break
			}
			return __r__3{
				
				id* __r__3}
			}()}break
		default:{
			__r__ = [@"5" mutableCopy]}break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) switchClass:(Class*)cl{
	return ^(NSMutableString*)switch (cl){
		case NSMutableString:{
			__r__ = [@"String" mutableCopy]}break;
		case MyClass:{
			__r__ = [@"unit.MyClass" mutableCopy]}break;
		default:{
			__r__ = [[@"other: " mutableCopy] stringByAppendingString:[Type getClassName:cl]]}break;
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) toStringX:(TestMatch*)x1{
	return ^(NSMutableString*)
	var $e2 : enum =  (x1)
	switch ( $e2.index ) {
		
		case 0:
		
		var MATCH x1_eU1_0 : int = $e2.params[0]{
			__r__ = ( (x1_eU1_0 > 1) ? [@">1" mutableCopy] : ( (x1_eU1_0 <= 1) ? [@"<=1" mutableCopy] : ^(NSMutableString*)@throw [@"this is impossible to reach actually" mutableCopy];
			return __r__3{
				
				NSMutableString* __r__3}
			}()))}break
		case 1:
		{
			__r__ = [@"U2" mutableCopy]}break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
+ (NSMutableString*) orMatch:(id)e1 e2:(id)e2{
	return ^(NSMutableString*)
	var $e2 : enum =  (e1[@"expr"])
	switch ( $e2.index ) {
		
		case 0:
		
		var MATCH e1_fexpr_eEConst_0 : Expr = $e2.params[0]{
			__r__ = ^(id)
			var $e4 : enum =  (e1_fexpr_eEConst_0)
			switch ( $e4.index ) {
				
				case 1:
				
				var MATCH e1_fexpr_eEConst_0_eCFloat_0 : NSMutableString = $e4.params[0]{
					__r__3 = ^(id)
					var $e6 : enum =  (e2[@"expr"])
					switch ( $e6.index ) {
						
						case 0:
						
						var MATCH e2_fexpr_eEConst_0 : Expr = $e6.params[0]{
							__r__5 = ^(id)
							var $e8 : enum =  (e2_fexpr_eEConst_0)
							switch ( $e8.index ) {
								
								case 1:
								
								var MATCH e2_fexpr_eEConst_0_eCFloat_0 : NSMutableString = $e8.params[0]{
									__r__7 = e1_fexpr_eEConst_0_eCFloat_0 + e2_fexpr_eEConst_0_eCFloat_0}break
								case 0:
								
								var MATCH e2_fexpr_eEConst_0_eCInt_0 : NSMutableString = $e8.params[0]{
									__r__7 = e1_fexpr_eEConst_0_eCFloat_0 + e2_fexpr_eEConst_0_eCInt_0}break
								default:{
									__r__7 = nil}break
							}
							return __r__7{
								
								id* __r__7}
							}()}break
						default:{
							__r__5 = nil}break
					}
					return __r__5{
						
						id* __r__5}
					}()}break
				case 0:
				
				var MATCH e1_fexpr_eEConst_0_eCInt_0 : NSMutableString = $e4.params[0]{
					__r__3 = ^(id)
					var $e10 : enum =  (e2[@"expr"])
					switch ( $e10.index ) {
						
						case 0:
						
						var MATCH e2_fexpr_eEConst_0 : Expr = $e10.params[0]{
							__r__9 = ^(id)
							var $e12 : enum =  (e2_fexpr_eEConst_0)
							switch ( $e12.index ) {
								
								case 1:
								
								var MATCH e2_fexpr_eEConst_0_eCFloat_0 : NSMutableString = $e12.params[0]{
									__r__11 = e1_fexpr_eEConst_0_eCInt_0 + e2_fexpr_eEConst_0_eCFloat_0}break
								case 0:
								
								var MATCH e2_fexpr_eEConst_0_eCInt_0 : NSMutableString = $e12.params[0]{
									__r__11 = e1_fexpr_eEConst_0_eCInt_0 + e2_fexpr_eEConst_0_eCInt_0}break
								default:{
									__r__11 = nil}break
							}
							return __r__11{
								
								id* __r__11}
							}()}break
						default:{
							__r__9 = nil}break
					}
					return __r__9{
						
						id* __r__9}
					}()}break
				default:{
					__r__3 = nil}break
			}
			return __r__3{
				
				id* __r__3}
			}()}break
		default:{
			__r__ = nil}break
	}
	return __r__{
		
		NSMutableString* __r__}
	}();
}
- (void) testBasic{
	[self eq:[@"bar" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EConst:[CString:[@"bar" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2861 copy],
		@"max":[@2866 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"127", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"bar" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EParenthesis:[@{
		@"expr":[[EConst:[CString:[@"bar" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2903 copy],
		@"max":[@2908 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2902 copy],
		@"max":[@2909 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"128", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"bar" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EUntyped:[@{
		@"expr":[[EConst:[CString:[@"bar" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2953 copy],
		@"max":[@2958 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2945 copy],
		@"max":[@2958 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"129", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"foo" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EField:[@{
		@"expr":[[EConst:[CIdent:[@"null" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2994 copy],
		@"max":[@2998 copy],
	} mutableCopy] copy],
	} mutableCopy] field:[@"foo" mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@2994 copy],
		@"max":[@3002 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"130", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"22" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EArray:[@{
		@"expr":[[EConst:[CIdent:[@"null" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3037 copy],
		@"max":[@3041 copy],
	} mutableCopy] copy],
	} mutableCopy] e2:[@{
		@"expr":[[EConst:[CInt:[@"22" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3042 copy],
		@"max":[@3044 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3037 copy],
		@"max":[@3045 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"131", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"22.5" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EArray:[@{
		@"expr":[[EConst:[CIdent:[@"null" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3082 copy],
		@"max":[@3086 copy],
	} mutableCopy] copy],
	} mutableCopy] e2:[@{
		@"expr":[[EConst:[CFloat:[@"22.5" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3087 copy],
		@"max":[@3091 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3082 copy],
		@"max":[@3092 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"132", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"EConst(CInt(0))" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EIn:[@{
		@"expr":[[EConst:[CInt:[@"1" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3140 copy],
		@"max":[@3141 copy],
	} mutableCopy] copy],
	} mutableCopy] e2:[@{
		@"expr":[[EConst:[CInt:[@"0" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3145 copy],
		@"max":[@3146 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3140 copy],
		@"max":[@3146 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"133", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"not_found" mutableCopy] v2:[TestMatch switchNormal:(id)[@{
		@"expr":[[EArray:[@{
		@"expr":[[EConst:[CIdent:[@"null" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3188 copy],
		@"max":[@3192 copy],
	} mutableCopy] copy],
	} mutableCopy] e2:[@{
		@"expr":[[EConst:[CString:[@"22" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3193 copy],
		@"max":[@3197 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3188 copy],
		@"max":[@3198 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"134", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self t:nil != [TestMatch switchCapture:(id)[@{
		@"expr":[[EConst:[CString:[@"foobar" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3237 copy],
		@"max":[@3245 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"136", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self t:nil == [TestMatch switchCapture:(id)[@{
		@"expr":[[EConst:[CString:[@"fooba" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3282 copy],
		@"max":[@3289 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"137", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self t:nil != [TestMatch switchCapture:(id)[@{
		@"expr":[[EConst:[CInt:[@"9" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3326 copy],
		@"max":[@3327 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"138", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self t:nil == [TestMatch switchCapture:(id)[@{
		@"expr":[[EConst:[CInt:[@"10" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3364 copy],
		@"max":[@3366 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"139", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"[]" mutableCopy] v2:[TestMatch switchArray:(id)[@{
		@"expr":[[EArrayDecl:[@[] mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3402 copy],
		@"max":[@3404 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"141", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"_" mutableCopy] v2:[TestMatch switchArray:(id)[@{
		@"expr":[[EConst:[CInt:[@"2" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3437 copy],
		@"max":[@3438 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"142", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"[EConst(CInt(22))]" mutableCopy] v2:[TestMatch switchArray:(id)[@{
		@"expr":[[EArrayDecl:[@[[@{
		@"expr":[[EConst:[CInt:[@"22" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3489 copy],
		@"max":[@3491 copy],
	} mutableCopy] copy],
	} mutableCopy]] mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3488 copy],
		@"max":[@3492 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"143", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"[EConst(CInt(22)),EConst(CString(foo))]" mutableCopy] v2:[TestMatch switchArray:(id)[@{
		@"expr":[[EArrayDecl:[@[[@{
		@"expr":[[EConst:[CInt:[@"22" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3564 copy],
		@"max":[@3566 copy],
	} mutableCopy] copy],
	} mutableCopy], [@{
		@"expr":[[EConst:[CString:[@"foo" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3567 copy],
		@"max":[@3572 copy],
	} mutableCopy] copy],
	} mutableCopy]] mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3563 copy],
		@"max":[@3573 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"144", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"_" mutableCopy] v2:[TestMatch switchArray:(id)[@{
		@"expr":[[EArrayDecl:[@[[@{
		@"expr":[[EConst:[CInt:[@"22" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3607 copy],
		@"max":[@3609 copy],
	} mutableCopy] copy],
	} mutableCopy], [@{
		@"expr":[[EConst:[CString:[@"foo" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3611 copy],
		@"max":[@3616 copy],
	} mutableCopy] copy],
	} mutableCopy], [@{
		@"expr":[[EConst:[CString:[@"bar" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3618 copy],
		@"max":[@3623 copy],
	} mutableCopy] copy],
	} mutableCopy]] mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@3606 copy],
		@"max":[@3624 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"145", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"0" mutableCopy] v2:[TestMatch switchArray2:[@[[@"a" mutableCopy], [@"b" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"147", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"1" mutableCopy] v2:[TestMatch switchArray2:[@[[@"a" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"148", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"2" mutableCopy] v2:[TestMatch switchArray2:[@[[@"b" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"149", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"3:c" mutableCopy] v2:[TestMatch switchArray2:[@[[@"c" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"150", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"4:a,a" mutableCopy] v2:[TestMatch switchArray2:[@[[@"a" mutableCopy], [@"a" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"151", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"4:b,a" mutableCopy] v2:[TestMatch switchArray2:[@[[@"b" mutableCopy], [@"a" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"152", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"5:3" mutableCopy] v2:[TestMatch switchArray2:[@[[@"a" mutableCopy], [@"a" mutableCopy], [@"a" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"153", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"6" mutableCopy] v2:[TestMatch switchArray2:[@[] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"154", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"7" mutableCopy] v2:[TestMatch switchArray2:[@[[@"a" mutableCopy], [@"a" mutableCopy], [@"a" mutableCopy], [@"b" mutableCopy]] mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"155", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"EConst(CString(foobar)):12" mutableCopy] v2:[TestMatch switchCrazy:(id)[@{
		@"expr":[[EUntyped:[@{
		@"expr":[[EParenthesis:[@{
		@"expr":[[EArray:[@{
		@"expr":[[EConst:[CString:[@"foobar" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@4037 copy],
		@"max":[@4045 copy],
	} mutableCopy] copy],
	} mutableCopy] e2:[@{
		@"expr":[[EConst:[CInt:[@"12" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@4046 copy],
		@"max":[@4048 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@4037 copy],
		@"max":[@4049 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@4036 copy],
		@"max":[@4050 copy],
	} mutableCopy] copy],
	} mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@4028 copy],
		@"max":[@4050 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"157", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"1" mutableCopy] v2:[TestMatch switchGuard:(id)[@{
		@"expr":[[EConst:[CString:[@"foobar" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@4085 copy],
		@"max":[@4093 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"159", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"2" mutableCopy] v2:[TestMatch switchGuard:(id)[@{
		@"expr":[[EConst:[CString:[@"barfoo" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@4126 copy],
		@"max":[@4134 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"160", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"3" mutableCopy] v2:[TestMatch switchGuard:(id)[@{
		@"expr":[[EConst:[CInt:[@"2" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@4167 copy],
		@"max":[@4168 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"161", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"4" mutableCopy] v2:[TestMatch switchGuard:(id)[@{
		@"expr":[[EConst:[CInt:[@"5" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@4201 copy],
		@"max":[@4202 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"162", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"4" mutableCopy] v2:[TestMatch switchGuard:(id)[@{
		@"expr":[[EConst:[CString:[@"bazfoo" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@4235 copy],
		@"max":[@4243 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"163", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"5" mutableCopy] v2:[TestMatch switchGuard:(id)[@{
		@"expr":[[EArrayDecl:[@[] mutableCopy]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@4276 copy],
		@"max":[@4278 copy],
	} mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"164", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"0" mutableCopy] v2:((NSMutableString)($this:(snd ctx.path)) BOOL _g = YES; int _g1 = 1; 
	NSMutableString *_g2 = [@"foo" mutableCopy]
	__r__ = ((NSMutableString)($this:(snd ctx.path)) switch (_g){
		case YES:{
			__r__2 = ((id)($this:(snd ctx.path)) switch (_g1){
				case 1:{
					__r__3 = ((id)($this:(snd ctx.path)) switch (_g2){
						case [@"foo" mutableCopy]:{
							__r__4 = [@"0" mutableCopy]}break;
						default:{
							__r__4 = [@"1" mutableCopy]}break;
					}
					return __r__4{
						
						id* __r__4}
					}(self))}break;
				default:{
					__r__3 = [@"_" mutableCopy]}break;
			}
			return __r__3{
				
				id* __r__3}
			}(self))}break;
		default:{
			__r__2 = [@"_" mutableCopy]}break;
	}
	return __r__2{
		
		NSMutableString* __r__2}
	}(self))
	return __r__{
		
		NSMutableString* __r__}
	}(self)) pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"166", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"0" mutableCopy] v2:((NSMutableString)($this:(snd ctx.path)) BOOL _g3 = YES; int _g4 = 1; 
	NSMutableString *_g5 = [@"foo" mutableCopy]
	__r__5 = ((NSMutableString)($this:(snd ctx.path)) switch (_g3){
		case YES:{
			__r__6 = ((id)($this:(snd ctx.path)) switch (_g4){
				case 1:{
					__r__7 = ((id)($this:(snd ctx.path)) switch (_g5){
						case [@"foo" mutableCopy]:{
							__r__8 = [@"0" mutableCopy]}break;
						default:{
							__r__8 = [@"1" mutableCopy]}break;
					}
					return __r__8{
						
						id* __r__8}
					}(self))}break;
				default:{
					__r__7 = [@"_" mutableCopy]}break;
			}
			return __r__7{
				
				id* __r__7}
			}(self))}break;
		default:{
			__r__6 = [@"_" mutableCopy]}break;
	}
	return __r__6{
		
		NSMutableString* __r__6}
	}(self))
	return __r__5{
		
		NSMutableString* __r__5}
	}(self)) pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"172", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"1" mutableCopy] v2:((NSMutableString)($this:(snd ctx.path)) BOOL _g6 = YES; int _g7 = 1; 
	NSMutableString *_g8 = [@"bar" mutableCopy]
	__r__9 = ((NSMutableString)($this:(snd ctx.path)) switch (_g6){
		case YES:{
			__r__10 = ((id)($this:(snd ctx.path)) switch (_g7){
				case 1:{
					__r__11 = ((id)($this:(snd ctx.path)) switch (_g8){
						case [@"foo" mutableCopy]:{
							__r__12 = [@"0" mutableCopy]}break;
						default:{
							__r__12 = [@"1" mutableCopy]}break;
					}
					return __r__12{
						
						id* __r__12}
					}(self))}break;
				default:{
					__r__11 = [@"_" mutableCopy]}break;
			}
			return __r__11{
				
				id* __r__11}
			}(self))}break;
		default:{
			__r__10 = [@"_" mutableCopy]}break;
	}
	return __r__10{
		
		NSMutableString* __r__10}
	}(self))
	return __r__9{
		
		NSMutableString* __r__9}
	}(self)) pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"178", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"_" mutableCopy] v2:((NSMutableString)($this:(snd ctx.path)) BOOL _g9 = NO; int _g10 = 1; 
	NSMutableString *_g11 = [@"foo" mutableCopy]
	__r__13 = ((NSMutableString)($this:(snd ctx.path)) switch (_g9){
		case YES:{
			__r__14 = ((id)($this:(snd ctx.path)) switch (_g10){
				case 1:{
					__r__15 = ((id)($this:(snd ctx.path)) switch (_g11){
						case [@"foo" mutableCopy]:{
							__r__16 = [@"0" mutableCopy]}break;
						default:{
							__r__16 = [@"1" mutableCopy]}break;
					}
					return __r__16{
						
						id* __r__16}
					}(self))}break;
				default:{
					__r__15 = [@"_" mutableCopy]}break;
			}
			return __r__15{
				
				id* __r__15}
			}(self))}break;
		default:{
			__r__14 = [@"_" mutableCopy]}break;
	}
	return __r__14{
		
		NSMutableString* __r__14}
	}(self))
	return __r__13{
		
		NSMutableString* __r__13}
	}(self)) pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"184", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	[self eq:[@"1" mutableCopy] v2:((NSMutableString)($this:(snd ctx.path)) int _g12 = 1; int _g13 = 2
	__r__17 = ((NSMutableString)($this:(snd ctx.path)) switch (_g12){
		case 0:{
			__r__18 = ((id)($this:(snd ctx.path)) switch (_g13){
				case 0:{
					__r__19 = [@"1" mutableCopy]}break;
				default:{
					__r__19 = [@"_" mutableCopy]}break;
			}
			return __r__19{
				
				id* __r__19}
			}(self))}break;
		case 1:{
			__r__18 = ((id)($this:(snd ctx.path)) switch (_g13){
				case 2:{
					__r__20 = [@"1" mutableCopy]}break;
				case 1:{
					__r__20 = [@"2" mutableCopy]}break;
				default:{
					__r__20 = [@"_" mutableCopy]}break;
			}
			return __r__20{
				
				id* __r__20}
			}(self))}break;
		default:{
			__r__18 = [@"_" mutableCopy]}break;
	}
	return __r__18{
		
		NSMutableString* __r__18}
	}(self))
	return __r__17{
		
		NSMutableString* __r__17}
	}(self)) pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"190", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
	
	TestMatch *t = [TA:[@"foo" mutableCopy]];
	[self eq:[@"0" mutableCopy] v2:((NSMutableString)($this:(snd ctx.path)) 
	var $e22 : enum =  (t)
	switch ( $e22.index ) {
		
		case 0:
		
		var MATCH t_eTA_0 : id = $e22.params[0]{
			__r__21 = ((id)($this:(snd ctx.path)) switch (t_eTA_0){
				case [@"foo" mutableCopy]:{
					__r__23 = [@"0" mutableCopy]}break;
				default:{
					__r__23 = [@"1" mutableCopy]}break;
			}
			return __r__23{
				
				id* __r__23}
			}(self))}break
		case 2:
		{
			__r__21 = [@"2" mutableCopy]}break
	}
	return __r__21{
		
		NSMutableString* __r__21}
	}(self)) pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"197", @"className":@"unit.TestMatch", @"methodName":@"testBasic"}];
}
- (void) testTuple{
	id test = ^(int *a, int *b, int *c){
		return ^(NSMutableString*)switch (a){
			case 1:{
				__r__ = ^(id)switch (b){
					case 1:{
						__r__2 = ^(id)switch (c){
							case 2:{
								__r__3 = [[@"0|x:" mutableCopy] stringByAppendingString:b]}break;
							default:{
								__r__3 = [[[[@"2|y:" mutableCopy] stringByAppendingString:b] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:c]}break;
						}
						return __r__3{
							
							id* __r__3}
						}()}break;
					case 2:{
						__r__2 = [[@"0|x:" mutableCopy] stringByAppendingString:c]}break;
					case 3:{
						__r__2 = ^(id)switch (c){
							case 2:{
								__r__4 = [[@"0|x:" mutableCopy] stringByAppendingString:b]}break;
							case 4:{
								__r__4 = [[@"1|z:" mutableCopy] stringByAppendingString:a]}break;
							default:{
								__r__4 = [[[[@"2|y:" mutableCopy] stringByAppendingString:b] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:c]}break;
						}
						return __r__4{
							
							id* __r__4}
						}()}break;
					default:{
						__r__2 = ^(id)switch (c){
							case 2:{
								__r__5 = [[@"0|x:" mutableCopy] stringByAppendingString:b]}break;
							default:{
								__r__5 = [[[[@"2|y:" mutableCopy] stringByAppendingString:b] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:c]}break;
						}
						return __r__5{
							
							id* __r__5}
						}()}break;
				}
				return __r__2{
					
					id* __r__2}
				}()}break;
			case 3:{
				__r__ = ^(id)switch (b){
					case 1:{
						__r__6 = ^(id)switch (c){
							case 2:{
								__r__7 = [[@"0|x:" mutableCopy] stringByAppendingString:a]}break;
							case 4:{
								__r__7 = [[@"1|z:" mutableCopy] stringByAppendingString:b]}break;
							default:{
								__r__7 = [[[[[[@"_:x:" mutableCopy] stringByAppendingString:a] stringByAppendingString:[@",y:" mutableCopy]] stringByAppendingString:b] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:c]}break;
						}
						return __r__7{
							
							id* __r__7}
						}()}break;
					case 4:{
						__r__6 = [[@"1|z:" mutableCopy] stringByAppendingString:c]}break;
					case 3:{
						__r__6 = ^(id)switch (c){
							case 4:{
								__r__8 = [[@"1|z:" mutableCopy] stringByAppendingString:b]}break;
							default:{
								__r__8 = [[[[[[@"_:x:" mutableCopy] stringByAppendingString:a] stringByAppendingString:[@",y:" mutableCopy]] stringByAppendingString:b] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:c]}break;
						}
						return __r__8{
							
							id* __r__8}
						}()}break;
					default:{
						__r__6 = ^(id)switch (c){
							case 4:{
								__r__9 = [[@"1|z:" mutableCopy] stringByAppendingString:b]}break;
							default:{
								__r__9 = [[[[[[@"_:x:" mutableCopy] stringByAppendingString:a] stringByAppendingString:[@",y:" mutableCopy]] stringByAppendingString:b] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:c]}break;
						}
						return __r__9{
							
							id* __r__9}
						}()}break;
				}
				return __r__6{
					
					id* __r__6}
				}()}break;
			case 2:{
				__r__ = ^(id)switch (b){
					case 1:{
						__r__10 = ^(id)switch (c){
							case 2:{
								__r__11 = [[@"0|x:" mutableCopy] stringByAppendingString:a]}break;
							default:{
								__r__11 = [[[[@"2|y:" mutableCopy] stringByAppendingString:c] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:b]}break;
						}
						return __r__11{
							
							id* __r__11}
						}()}break;
					case 3:{
						__r__10 = ^(id)switch (c){
							case 4:{
								__r__12 = [[@"1|z:" mutableCopy] stringByAppendingString:a]}break;
							default:{
								__r__12 = [[[[@"2|y:" mutableCopy] stringByAppendingString:c] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:b]}break;
						}
						return __r__12{
							
							id* __r__12}
						}()}break;
					default:{
						__r__10 = [[[[@"2|y:" mutableCopy] stringByAppendingString:c] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:b]}break;
				}
				return __r__10{
					
					id* __r__10}
				}()}break;
			default:{
				__r__ = ^(id)switch (b){
					case 1:{
						__r__13 = ^(id)switch (c){
							case 2:{
								__r__14 = [[@"0|x:" mutableCopy] stringByAppendingString:a]}break;
							default:{
								__r__14 = [[[[[[@"_:x:" mutableCopy] stringByAppendingString:a] stringByAppendingString:[@",y:" mutableCopy]] stringByAppendingString:b] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:c]}break;
						}
						return __r__14{
							
							id* __r__14}
						}()}break;
					case 3:{
						__r__13 = ^(id)switch (c){
							case 4:{
								__r__15 = [[@"1|z:" mutableCopy] stringByAppendingString:a]}break;
							default:{
								__r__15 = [[[[[[@"_:x:" mutableCopy] stringByAppendingString:a] stringByAppendingString:[@",y:" mutableCopy]] stringByAppendingString:b] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:c]}break;
						}
						return __r__15{
							
							id* __r__15}
						}()}break;
					default:{
						__r__13 = [[[[[[@"_:x:" mutableCopy] stringByAppendingString:a] stringByAppendingString:[@",y:" mutableCopy]] stringByAppendingString:b] stringByAppendingString:[@",z:" mutableCopy]] stringByAppendingString:c]}break;
				}
				return __r__13{
					
					id* __r__13}
				}()}break;
		}
		return __r__{
			
			NSMutableString* __r__}
		}();
	}
	[self eq:[@"0|x:9" mutableCopy] v2:[test:9 b:1 c:2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"211", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"0|x:9" mutableCopy] v2:[test:1 b:2 c:9] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"212", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"0|x:9" mutableCopy] v2:[test:1 b:9 c:2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"213", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"1|z:12" mutableCopy] v2:[test:3 b:4 c:12] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"214", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"1|z:12" mutableCopy] v2:[test:12 b:3 c:4] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"215", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"1|z:12" mutableCopy] v2:[test:3 b:12 c:4] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"216", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"2|y:9,z:8" mutableCopy] v2:[test:1 b:9 c:8] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"217", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"2|y:9,z:8" mutableCopy] v2:[test:2 b:8 c:9] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"218", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
	[self eq:[@"_:x:9,y:8,z:7" mutableCopy] v2:[test:9 b:8 c:7] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"219", @"className":@"unit.TestMatch", @"methodName":@"testTuple"}];
}
- (void) testGrouping{
	id test = ^(int *v){
		return ^(NSMutableString*)switch (v){
			case 1:case 2:case 3:{
				__r__ = [@"0" mutableCopy]}break;
			case 4:{
				__r__ = ( (v == 5) ? [@"1" mutableCopy] : [@"2" mutableCopy])}break;
			case 5:{
				__r__ = ( (v == 5) ? [@"1" mutableCopy] : [@"2" mutableCopy])}break;
			case 6:{
				__r__ = ( (v == 5) ? [@"1" mutableCopy] : [@"2" mutableCopy])}break;
			case 8:case 9:{
				__r__ = [@"3" mutableCopy]}break;
			default:{
				__r__ = [[@"_:" mutableCopy] stringByAppendingString:v]}break;
		}
		return __r__{
			
			NSMutableString* __r__}
		}();
	}
	
	NSMutableArray *results = [@[[@"_:0" mutableCopy], [@"0" mutableCopy], [@"0" mutableCopy], [@"0" mutableCopy], [@"2" mutableCopy], [@"1" mutableCopy], [@"2" mutableCopy], [@"_:7" mutableCopy], [@"3" mutableCopy], [@"3" mutableCopy], [@"_:10" mutableCopy]] mutableCopy];
	{
		int _g1 = 0; int _g = results.length;
		while (_g1 < _g) {
			int i = _g1++;
			[self eq:[results hx_objectAtIndex:i] v2:[test:i] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"232", @"className":@"unit.TestMatch", @"methodName":@"testGrouping"}];
		}
	}
}
- (void) testSubtyping{
	
	InitBase *c = [[InitBase alloc] init];
	
	NSMutableString *r = ((NSMutableString)($this:(snd ctx.path)) switch (c.s){
		case [@"foo" mutableCopy]:{
			__r__ = [@"s = foo" mutableCopy]}break;
		default:{
			__r__ = [@"_" mutableCopy]}break;
	}
	return __r__{
		
		NSMutableString* __r__}
	}(self));
	[self eq:[@"s = foo" mutableCopy] v2:r pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"244", @"className":@"unit.TestMatch", @"methodName":@"testSubtyping"}];
	[self eq:[@"0" mutableCopy] v2:[TestMatch switchStructure:[@{
		@"foo":[[@"val1" mutableCopy] copy],
		@"bar":[[@"val2" mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"246", @"className":@"unit.TestMatch", @"methodName":@"testSubtyping"}];
	[self eq:[@"1" mutableCopy] v2:[TestMatch switchStructure:[@{
		@"foo":[[@"val1" mutableCopy] copy],
		@"bar":[[@"val1" mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"247", @"className":@"unit.TestMatch", @"methodName":@"testSubtyping"}];
	[self eq:[@"2" mutableCopy] v2:[TestMatch switchStructure:[@{
		@"foo":[[@"val2" mutableCopy] copy],
		@"bar":[[@"val2" mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"248", @"className":@"unit.TestMatch", @"methodName":@"testSubtyping"}];
	[self eq:[@"val1" mutableCopy] v2:[TestMatch switchStructure:[@{
		@"foo":[[@"val2" mutableCopy] copy],
		@"bar":[[@"val1" mutableCopy] copy],
	} mutableCopy]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"249", @"className":@"unit.TestMatch", @"methodName":@"testSubtyping"}];
}
- (void) testGadt{
	[self eq:[@"<=1" mutableCopy] v2:[TestMatch toStringX:[U1:1]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"262", @"className":@"unit.TestMatch", @"methodName":@"testGadt"}];
	[self eq:[@">1" mutableCopy] v2:[TestMatch toStringX:[U1:2]] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"263", @"className":@"unit.TestMatch", @"methodName":@"testGadt"}];
	[self eq:[@"U2" mutableCopy] v2:[TestMatch toStringX:U2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"264", @"className":@"unit.TestMatch", @"methodName":@"testGadt"}];
}
- (void) testClassSwitch{
	[self eq:[@"String" mutableCopy] v2:[TestMatch switchClass:NSMutableString] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"268", @"className":@"unit.TestMatch", @"methodName":@"testClassSwitch"}];
	[self eq:[@"unit.MyClass" mutableCopy] v2:[TestMatch switchClass:MyClass] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"269", @"className":@"unit.TestMatch", @"methodName":@"testClassSwitch"}];
	[self eq:[@"other: unit.TestMatch" mutableCopy] v2:[TestMatch switchClass:TestMatch] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"270", @"className":@"unit.TestMatch", @"methodName":@"testClassSwitch"}];
}
- (void) testOr{
	id i1 = (id)[@{
		@"expr":[[EConst:[CInt:[@"1" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@6960 copy],
		@"max":[@6961 copy],
	} mutableCopy] copy],
	} mutableCopy];
	id i2 = (id)[@{
		@"expr":[[EConst:[CInt:[@"2" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@6981 copy],
		@"max":[@6982 copy],
	} mutableCopy] copy],
	} mutableCopy];
	id f1 = (id)[@{
		@"expr":[[EConst:[CFloat:[@"3.9" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@7002 copy],
		@"max":[@7005 copy],
	} mutableCopy] copy],
	} mutableCopy];
	id f2 = (id)[@{
		@"expr":[[EConst:[CFloat:[@"4.8" mutableCopy]]] copy],
		@"pos":[[@{
		@"file":[[@"haxe/tests/unit/TestMatch.hx" mutableCopy] copy],
		@"min":[@7025 copy],
		@"max":[@7028 copy],
	} mutableCopy] copy],
	} mutableCopy];
	[self eq:[@"11" mutableCopy] v2:[TestMatch orMatch:i1 e2:i1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"278", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"12" mutableCopy] v2:[TestMatch orMatch:i1 e2:i2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"279", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"13.9" mutableCopy] v2:[TestMatch orMatch:i1 e2:f1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"280", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"14.8" mutableCopy] v2:[TestMatch orMatch:i1 e2:f2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"281", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"21" mutableCopy] v2:[TestMatch orMatch:i2 e2:i1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"283", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"22" mutableCopy] v2:[TestMatch orMatch:i2 e2:i2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"284", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"23.9" mutableCopy] v2:[TestMatch orMatch:i2 e2:f1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"285", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"24.8" mutableCopy] v2:[TestMatch orMatch:i2 e2:f2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"286", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"3.91" mutableCopy] v2:[TestMatch orMatch:f1 e2:i1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"288", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"3.92" mutableCopy] v2:[TestMatch orMatch:f1 e2:i2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"289", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"3.93.9" mutableCopy] v2:[TestMatch orMatch:f1 e2:f1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"290", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"3.94.8" mutableCopy] v2:[TestMatch orMatch:f1 e2:f2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"291", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"4.81" mutableCopy] v2:[TestMatch orMatch:f2 e2:i1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"293", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"4.82" mutableCopy] v2:[TestMatch orMatch:f2 e2:i2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"294", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"4.83.9" mutableCopy] v2:[TestMatch orMatch:f2 e2:f1] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"295", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
	[self eq:[@"4.84.8" mutableCopy] v2:[TestMatch orMatch:f2 e2:f2] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"296", @"className":@"unit.TestMatch", @"methodName":@"testOr"}];
}
- (void) testStaticNull{
	
	TestMatch *v = [A];
	
	NSMutableString *r = ((NSMutableString)($this:(snd ctx.path)) 
	var $e2 : enum =  (v)
	switch ( $e2.index ) {
		
		case 0:
		
		var MATCH v_eA_0 : int = $e2.params[0]{
			__r__ = ( (v_eA_0 == nil) ? [@"null" mutableCopy] : [@"not null" mutableCopy])}break
	}
	return __r__{
		
		NSMutableString* __r__}
	}(self));
	[self eq:[@"null" mutableCopy] v2:r pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"306", @"className":@"unit.TestMatch", @"methodName":@"testStaticNull"}];
}
- (void) testNonExhaustiveness{
	[self eq:[@"Unmatched patterns: false" mutableCopy] v2:[@"Unmatched patterns: false" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"317", @"className":@"unit.TestMatch", @"methodName":@"testNonExhaustiveness"}];
	[self eq:[@"Unmatched patterns: OpNegBits | OpNeg" mutableCopy] v2:[@"Unmatched patterns: OpNegBits | OpNeg" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"320", @"className":@"unit.TestMatch", @"methodName":@"testNonExhaustiveness"}];
	[self eq:[@"Unmatched patterns: Node(Leaf(_),_)" mutableCopy] v2:[@"Unmatched patterns: Node(Leaf(_),_)" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"325", @"className":@"unit.TestMatch", @"methodName":@"testNonExhaustiveness"}];
	[self eq:[@"Unmatched patterns: Leaf" mutableCopy] v2:[@"Unmatched patterns: Leaf" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"329", @"className":@"unit.TestMatch", @"methodName":@"testNonExhaustiveness"}];
	[self eq:[@"Unmatched patterns: Leaf(_)" mutableCopy] v2:[@"Unmatched patterns: Leaf(_)" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"333", @"className":@"unit.TestMatch", @"methodName":@"testNonExhaustiveness"}];
	[self eq:[@"Unmatched patterns: [_,false,_]" mutableCopy] v2:[@"Unmatched patterns: [_,false,_]" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"337", @"className":@"unit.TestMatch", @"methodName":@"testNonExhaustiveness"}];
}
- (void) testInvalidBinding{
	[self eq:[@"Variable y must appear exactly once in each sub-pattern" mutableCopy] v2:[@"Variable y must appear exactly once in each sub-pattern" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"343", @"className":@"unit.TestMatch", @"methodName":@"testInvalidBinding"}];
	[self eq:[@"Variable y must appear exactly once in each sub-pattern" mutableCopy] v2:[@"Variable y must appear exactly once in each sub-pattern" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"346", @"className":@"unit.TestMatch", @"methodName":@"testInvalidBinding"}];
	[self eq:[@"Variable x must appear exactly once in each sub-pattern" mutableCopy] v2:[@"Variable x must appear exactly once in each sub-pattern" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"349", @"className":@"unit.TestMatch", @"methodName":@"testInvalidBinding"}];
	[self eq:[@"Variable l must appear exactly once in each sub-pattern" mutableCopy] v2:[@"Variable l must appear exactly once in each sub-pattern" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"352", @"className":@"unit.TestMatch", @"methodName":@"testInvalidBinding"}];
	[self eq:[@"Variable l must appear exactly once in each sub-pattern" mutableCopy] v2:[@"Variable l must appear exactly once in each sub-pattern" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"355", @"className":@"unit.TestMatch", @"methodName":@"testInvalidBinding"}];
	[self eq:[@"String should be unit.Tree<String>" mutableCopy] v2:[@"String should be unit.Tree<String>" mutableCopy] pos:@{@"fileName":@"TestMatch.hx", @"lineNumber":@"358", @"className":@"unit.TestMatch", @"methodName":@"testInvalidBinding"}];
}

@end
