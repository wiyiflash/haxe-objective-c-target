//
//  TestGADT
//  Test
//
//  Source generated by Haxe Objective-C target
//

#import "../unit/TestGADT.h"

@implementation TestGADT

+ (id) evalConst:(Constant*)c{
	
	return ^(id)
	enum s = e2 (c)
	switch ( e2.index ) {
		
		case 0:
		
		var MATCH s : NSMutableString = e2.params[0]__r__ = s;break
		case 1:
		
		var MATCH i : NSMutableString = e2.params[0]__r__ = [Std parseInt:i];break
		case 2:
		
		var MATCH f : NSMutableString = e2.params[0]__r__ = [Std parseFloat:f];break
	}
	return __r__{
		
		id* __r__}
	}();
}
+ (id) evalBinop:(Binop*)op e1:(Expr*)e1 e2:(Expr*)e2{
	
	return ^(id)
	enum s = e2 (op)
	switch ( e2.index ) {
		
		case 0:
		__r__ = CASTTMonoCASTTMono[TestGADT eval:e1] + [TestGADT eval:e2];break
		case 1:
		__r__ = [TestGADT eval:e1] == [TestGADT eval:e2];break
	}
	return __r__{
		
		id* __r__}
	}();
}
+ (id) eval:(Expr*)e{
	
	return ^(id)
	enum s = e2 (e)
	switch ( e2.index ) {
		
		case 0:
		
		var MATCH c : Constant = e2.params[0]__r__ = [TestGADT evalConst:c];break
		case 1:
		
		var MATCH _e2 : Expr = e2.params[2], MATCH _e1 : Expr = e2.params[1], MATCH _op : Binop = e2.params[0]__r__ = [TestGADT evalBinop:_op e1:_e1 e2:_e2];break
	}
	return __r__{
		
		id* __r__}
	}();
}
- (void) testBasic{
	
	float ti = 1.22;
	BOOL tb = NO;
	
	Expr *e1 = [EConst:[CFloat:[@"12" mutableCopy]]];
	
	Expr *e2 = [EConst:[CFloat:[@"8" mutableCopy]]];
	
	Expr *e3 = [EConst:[CFloat:[@"12" mutableCopy]]];
	
	Expr *eadd = [EBinop:OpAdd e1:e1 e2:e2];
	float s = [TestGADT eval:eadd];
	{
		
		count++;
		[self eq:[@"TAbstract(Float,[])" mutableCopy] v2:[@"TAbstract(Float,[])" mutableCopy] pos:@{@"fileName":@"TestGADT.hx", @"lineNumber":@"31", @"className":@"unit.TestGADT", @"methodName":@"testBasic"}];
	}
	[self eq:s v2:20 pos:@{@"fileName":@"TestGADT.hx", @"lineNumber":@"32", @"className":@"unit.TestGADT", @"methodName":@"testBasic"}];
	
	Expr *eeq = [EBinop:OpEq e1:e1 e2:e2];
	BOOL s1 = [TestGADT eval:eeq];
	{
		
		count++;
		[self eq:[@"TAbstract(Bool,[])" mutableCopy] v2:[@"TAbstract(Bool,[])" mutableCopy] pos:@{@"fileName":@"TestGADT.hx", @"lineNumber":@"36", @"className":@"unit.TestGADT", @"methodName":@"testBasic"}];
	}
	[self eq:s1 v2:NO pos:@{@"fileName":@"TestGADT.hx", @"lineNumber":@"37", @"className":@"unit.TestGADT", @"methodName":@"testBasic"}];
	
	Expr *eeq1 = [EBinop:OpEq e1:e1 e2:e3];
	BOOL s2 = [TestGADT eval:eeq1];
	{
		
		count++;
		[self eq:[@"TAbstract(Bool,[])" mutableCopy] v2:[@"TAbstract(Bool,[])" mutableCopy] pos:@{@"fileName":@"TestGADT.hx", @"lineNumber":@"41", @"className":@"unit.TestGADT", @"methodName":@"testBasic"}];
	}
	[self eq:s2 v2:YES pos:@{@"fileName":@"TestGADT.hx", @"lineNumber":@"42", @"className":@"unit.TestGADT", @"methodName":@"testBasic"}];
}

@end
