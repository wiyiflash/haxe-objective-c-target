//
//  BalancedTree
//  Tests
//
//  Source generated by Haxe Objective-C target
//

#import "../../haxe/ds/BalancedTree.h"

@implementation BalancedTree

@synthesize root;
- (void) set:(id)k v:(id)v{
	
	self.root = [self setLoop:k v:v node:self.root];
}
- (id) get:(id)k{
	
	
	TreeNode *node = self.root;
	while (node != nil) {
		
		int c = [self compare:k k2:node.key];
		if (c == 0) return node.value;
		if (c < 0) node = node.left;
		else node = node.right;
	}
	return nil;
}
- (BOOL) remove:(id)k{
	
	return ((BOOL)self.__r__ @try {
		
		__r__ = ((BOOL)self.__r__2 self.root = [self removeLoop:k node:self.root]
		__r__2 = YES
		return __r__2{
			
			BOOL* __r__2}
		}(self));
	}
	@catch (NSException *e) {
		
		__r__ = NO;
	}
	return __r__{
		
		BOOL* __r__}
	}(self));
}
- (BOOL) exists:(id)k{
	
	
	TreeNode *node = self.root;
	while (node != nil) {
		
		int c = [self compare:k k2:node.key];
		if (c == 0) return YES;
		else if (c < 0) node = node.left;
		else node = node.right;
	}
	return NO;
}
- (id) iterator{
	
	
	NSMutableArray *ret = [@[] mutableCopy];
	[self iteratorLoop:self.root acc:ret];
	return [ret iterator];
}
- (id) keys{
	
	
	NSMutableArray *ret = [@[] mutableCopy];
	[self keysLoop:self.root acc:ret];
	return [ret iterator];
}
- (TreeNode*) setLoop:(id)k v:(id)v node:(TreeNode*)node{
	
	if (node == nil) return [[TreeNode alloc] init:nil k:k v:v r:nil h:nil];
	int c = [self compare:k k2:node.key];
	return ( (c == 0) ? [[TreeNode alloc] init:node left k:k v:v r:node right h:( (node == nil) ? 0 : node _height)] : ( (c < 0) ? ((TreeNode)self.__r__ 
	TreeNode *nl = [self setLoop:k v:v node:node.left]
	__r__ = [self balance:nl k:node.key v:node.value r:node.right]
	return __r__{
		
		TreeNode* __r__}
	}(self)) : ((TreeNode)self.__r__2 
	TreeNode *nr = [self setLoop:k v:v node:node.right]
	__r__2 = [self balance:node.left k:node.key v:node.value r:nr]
	return __r__2{
		
		TreeNode* __r__2}
	}(self))));
}
- (TreeNode*) removeLoop:(id)k node:(TreeNode*)node{
	
	if (node == nil) @throw [@"Not_found" mutableCopy];
	int c = [self compare:k k2:node.key];
	return ( (c == 0) ? [self merge:node.left t2:node.right] : ( (c < 0) ? [self balance:[self removeLoop:k node:node.left] k:node.key v:node.value r:node.right] : [self balance:node.left k:node.key v:node.value r:[self removeLoop:k node:node.right]]));
}
- (void) iteratorLoop:(TreeNode*)node acc:(NSMutableArray*)acc{
	
	if (node != nil) {
		
		[acc push:node.value];
		[self iteratorLoop:node.left acc:acc];
		[self iteratorLoop:node.right acc:acc];
	}
}
- (void) keysLoop:(TreeNode*)node acc:(NSMutableArray*)acc{
	
	if (node != nil) {
		
		[acc push:node.key];
		[self keysLoop:node.left acc:acc];
		[self keysLoop:node.right acc:acc];
	}
}
- (TreeNode*) merge:(TreeNode*)t1 t2:(TreeNode*)t2{
	
	if (t1 == nil) return t2;
	if (t2 == nil) return t1;
	
	TreeNode *t = [self minBinding:t2];
	return [self balance:t1 k:t.key v:t.value r:[self removeMinBinding:t2]];
}
- (TreeNode*) minBinding:(TreeNode*)t{
	
	return ( (t == nil) ? ((TreeNode)self.__r__ @throw [@"Not_found" mutableCopy]
	return __r__{
		
		TreeNode* __r__}
	}(self)) : ( (t.left == nil) ? t : [self minBinding:t.left]));
}
- (TreeNode*) removeMinBinding:(TreeNode*)t{
	
	return ( (t.left == nil) ? t.right : [self balance:[self removeMinBinding:t.left] k:t.key v:t.value r:t.right]);
}
- (TreeNode*) balance:(TreeNode*)l k:(id)k v:(id)v r:(TreeNode*)r{
	
	int hl = ( (l == nil) ? 0 : l._height);
	int hr = ( (r == nil) ? 0 : r._height);
	return ( (hl > hr + 2) ? ( (((int)self.__r__ 
	TreeNode *_this = l.left
	__r__ = ( (_this == nil) ? 0 : _this._height)
	return __r__{
		
		int* __r__}
	}(self)) >= ((int)self.__r__2 
	TreeNode *_this = l.right
	__r__2 = ( (_this == nil) ? 0 : _this._height)
	return __r__2{
		
		int* __r__2}
	}(self))) ? [[TreeNode alloc] init:l left k:l key v:l value r:[TreeNode alloc] :l right k:k v:v r:r h:nil h:nil] : [[TreeNode alloc] init:[TreeNode alloc] :l left k:l key v:l value r:l.right left h:nil k:l.right key v:l.right value r:[TreeNode alloc] :l.right right k:k v:v r:r h:nil h:nil]) : ( (hr > hl + 2) ? ( (((int)self.__r__3 
	TreeNode *_this = r.right
	__r__3 = ( (_this == nil) ? 0 : _this._height)
	return __r__3{
		
		int* __r__3}
	}(self)) > ((int)self.__r__4 
	TreeNode *_this = r.left
	__r__4 = ( (_this == nil) ? 0 : _this._height)
	return __r__4{
		
		int* __r__4}
	}(self))) ? [[TreeNode alloc] init:[TreeNode alloc] :l k:k v:v r:r left h:nil k:r key v:r value r:r right h:nil] : [[TreeNode alloc] init:[TreeNode alloc] :l k:k v:v r:r.left left h:nil k:r.left key v:r.left value r:[TreeNode alloc] :r.left right k:r key v:r value r:r right h:nil h:nil]) : [[TreeNode alloc] init:l k:k v:v r:r h: (( (hl > hr) ? hl : hr)) + 1]));
}
- (int) compare:(id)k1 k2:(id)k2{
	
	return [Reflect compare:k1 b:k2];
}
- (NSMutableString*) toString{
	
	return [[[@"{" mutableCopy] stringByAppendingString:[self.root toString]] stringByAppendingString:[@"}" mutableCopy]];
}
- (id) init{
	
	self = [super init];
	return self;
}

@end

@implementation TreeNode

@synthesize left;
@synthesize right;
@synthesize key;
@synthesize value;
@synthesize _height;
- (NSMutableString*) toString{
	
	return  (( (self.left == nil) ? [@"" mutableCopy] : [[self.left toString] stringByAppendingString:[@", " mutableCopy]])) +  ([[[[@"" mutableCopy] stringByAppendingString:[Std string:self.key]] stringByAppendingString:[@"=" mutableCopy]] stringByAppendingString:[Std string:self.value]]) +  (( (self.right == nil) ? [@"" mutableCopy] : [[@", " mutableCopy] stringByAppendingString:[self.right toString]]));
}
- (id) init:(TreeNode*)l k:(id)k v:(id)v r:(TreeNode*)r h:(int)h{
	
	self = [super init];
	// Optional arguments
	if (!h) h = -1;
	
	self.left = l;
	self.key = k;
	self.value = v;
	self.right = r;
	if (h == -1) self._height =  (( (((int)self.__r__ 
	TreeNode *_this = self.left
	__r__ = ( (_this == nil) ? 0 : _this._height)
	return __r__{
		
		int* __r__}
	}(self)) > ((int)self.__r__2 
	TreeNode *_this = self.right
	__r__2 = ( (_this == nil) ? 0 : _this._height)
	return __r__2{
		
		int* __r__2}
	}(self))) ? ((int)self.__r__3 
	TreeNode *_this = self.left
	__r__3 = ( (_this == nil) ? 0 : _this._height)
	return __r__3{
		
		int* __r__3}
	}(self)) : ((int)self.__r__4 
	TreeNode *_this = self.right
	__r__4 = ( (_this == nil) ? 0 : _this._height)
	return __r__4{
		
		int* __r__4}
	}(self)))) + 1;
	else self._height = h;
	return self;
}

@end
